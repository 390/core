ZIKULA HOOKS
============
This document describes the Zikula Hook system.

What is a hook?
---------------
A hook is just another kind of event that occurs in Zikula and should really be called
'hookable events'.  Unlike events, hookable events are used to attach modules/plugins to
other modules so that they can UI functionality and are completely configurable by the 
site administrator in that the administrator can choose which modules are hooks onto
which, and what order they are executed in.  For example, a comments module could
attach comments to a blog module.  Similarly a ratings module could be attached to a
blog module, so that all articles would have now have ratings.

Other examples could be adding extra fields to forms to gather extra information.

Providers and Subscriber
------------------------
In this document we will use "hook providers", and "hook subscribers".  A provider is simply
a module/plugin that actually provides some functionality that can be attached to other
modules's output.

A subscriber is simply a module that understands hooks.  It can process hooks that are
provided by other modules.

Areas
-----
This is an advanced feature for complex modules.  In general, modules will only provide
or subscribe to one area.  Areas allow subscribers and provider to group their features.
This is to allow modules to provide different groups of hooks.  From the provider
side, a it can provide different hook features.  From the subscriber side, it allows a
module to apply hooks to one part of a module as opposed to another.

Areas should all be unique, so please use this format:

    modulehook_area.mymodule.<areaname>
    eg.
    modulehook_area.comments.general (the provider area)
    modulehook_area.news.articles    (the subscriber area)

Subscriber Modules
------------------
Modules that understand hooks must make this known to the Zikula framework the
modules's Version.php.  This is done by adding a method called to Version.php

    protected function setupHookBundles()
    {
        $bundle = new Zikula_Version_HookSubscriberBundle('modulehook_area.news.articles', $this->__('News Display Hooks'));
        $bundle->addType('ui.view', 'news.hook.articles.ui.view');
        $bundle->addType('ui.edit', 'news.hook.articles.ui.edit');
        // add other types as needed
        $this->registerHookSubscriberBundle($bundle);
    }

During installation or upgrade of the module you must register the bundles with the
persistence layer using:

    HookUtil::registerHookSubscriberBundles($this->version);

A complex module might have several different areas where attaching Hooks may or
may not be appropriate, or may require different Hooks for different areas.
This is why you may specify different areas in the API.  Each area would have to
have it's own set of unique event names.

The addType() method deserves some explanation.  The first parameter is the hook
type; the second parameter is the event name that is triggered by *THIS* module.
So if this module was a news module, then these are the unique names that only
*this* news module actually triggers.  Under the hood, when a user attaches say
a comments module (provider), then the hook handler of the comment module will be
attached to the EventManager using the event name supplied by the subscriber module
(news). e.g. attach news.ui.view to comments.handler.ui.view which is the name of a
callable handler registered by the hook provider (news).

It is also necessary to add the following to the getMetaData() method of Version.php
to let Zikula know that the module understands Hooks and may subscribe to them.
Zikula will add a configuration menu to the administration area of the module.  For
this reason you *must* have an admin controller in the module.

    $meta['capabilities'] = array(HookUtil::SUBSCRIBER_CAPABLE => array('enabled' => true));

Provider Modules
----------------
Provider modules must make their available hook handlers known to Zikula.  You must perform three
tasks:

Firstly add the hook_provider capability to the module's Version.php in getMetaData()

    $meta['capabilities'] = array(HookUtil::PROVIDER_CAPABLE => array('enabled' => true));

Secondly, you must configure provider bundles in the Version.php by adding the following method
to Version.php

    protected function setupHookBundles()
    {
        $bundle = new Zikula_Version_HookProviderBundle('modulehook_area.ratings.item', $this->__('Ratings Hook Poviders'));
        $bundle->addHook('hookhandler.ratings.ui.view', 'ui.view', 'Ratings_Hooks', 'uiview', 'ratings.service');
        // add other hooks as needed
        $this->registerHookProviderBundle($bundle);

        //... repeat as many times as necessary
    }

Thirdly, installation or upgrade of the module you must register the bundles with the
persistence layer using:

    HookUtil::registerHookProviderBundles($this->version);

This will register the hook event handlers, that is to say, the actual PHP class/method
that will respond to hook events that are triggered by subscriber modules.

A module may register either static class callable methods, like Foo::Bar($event) or
services (which are instanciated class objects).  If using services, they must be 
instances of Zikula_EventHandler.  We use one API do register this.

Leaving $serviceId = null, will tell Zikula the callable is a static class method.
If you give a $serviceId, then this class will be instanciated and used.  This means
you can use the same $serviceId and have multiple methods in side if you wish.

The $name of the hook, is the name of the handler - a common name.  This is NOT
an event name.

    $bundle->addHook($name, $type, $className, $method, $serviceId, $weight);

    // registering a static method handler.
    $bundle->addHook('hookhandler.ratings.ui.view', 'ui.view', 'Ratings_Hooks', 'uiview');

    // registering a service (preferred - class must be an instance of Zikula_HookHandler)
    $bundle->addHook('hookhandler.ratings.ui.view', 'ui.view', 'Ratings_Hooks', 'uiview', 'module.ratings_hooks');

The $weight parameter can be used to set default weights of handlers that are
eventually attached with EventManager.  Generally, this parameter can be left alone.

Hook Types
----------
The following is a list of valid hook types.  Not all have to be used but in general,
a HookBundle should contain at least the ui.* and process.* handlers valid to complete
an action.

ui.view          - Display hook for view/display templates.
ui.edit          - Display hook for create/edit forms.
ui.delete        - Display hook for delete dialogues (generally not used).

validate.edit    - Used to validate input from an ui create/edit form.
validate.delete  - Used to validate input from an ui create/edit form (generally no used).

process.edit     - Perform the final update actions for a ui create/edit form.
process.delete   - Perform the final delete actions for a ui form.

Hookable Events
---------------
In this section we will discuss the actual hookable event that is triggered by
a subscriber module.

The event encapulates information about the hookable event.  Principally, we need
the hook event name, e.g. '<nodulename>.hook.<area>.ui.edit'.

Next, we need the subject of the event.  This will be the object or array of data.
For example if this was a blog post, then it would be the blog post object (if
using Doctrine or the array of the blog post).  Please note you need this in all
cases except for create where there is no data yet, or if there is, it's an empty
object.  This goes for delete operations also.  This might not make sense at first
look, but even delete operations normally come from a screen that has displayed
the post to be deleted, therefor, this object should already be available.

In the arguments of the event, we should also include an array of
'caller' => $moduleName,
'id'     => the id of the object

It might looks like this:

    new Zikula_Event('news.hook.articles.process.update', $article, array('caller' => 'News', 'id' => $article['id']));

Implementing Hooks from the Subscriber Side
-------------------------------------------
So it can be seen quite clearly that Hooks are really only for use on with display.  Their
main purpose it so a module can be attached to another, like attaching ratings to blog
posts.  In this section we cover the implementation of hooks from the subscriber's side.
So in our example, that would mean the Blogging module.

We don't need to be concerned with attaching hooks to modules, that is handled automatically
by the administation UI.

Attaching display hooks is very simple.  Inside the template simply add

    {notifydisplayhooks eventname='news.hook.articles.ui.view' subject=$subject id=$subject[id] assign='display_hooks'}

$module will be added magically unless you need to specify it (the value is taken from the Zikula_View instance.

The plugin will return all display hooks, sorted according to the administration
settings.  The return is an array of

    array('name1' => 'output1',
          'name2' => 'output2');

In the module controllers, you will need to implement the process and or validation
hook types.  This can be done as follows:

    // the long way
    $event = new Zikula_Event('news.hook.articles.process.create', $subject, array('id' => $id, 'module' => $moduleName));
    $this->eventManager->notify($event);

   // the short way, provided in instances of Zikula_Base (controllers, APIs etc).
   $this->notifyHooks('news.hook.articles.process.edit', $subject, $id);

HOOK RESPONSES FROM PROVIDERS
-----------------------------
A hook handler should response with a Zikula_Response_DisplayHook object in the following manner.

    // example of a static handler (*not* preferred for edit/validate handlers which should be Zikula_HookHandlder instances)
    public static function hookHandler(Zikula_Event $event)
    {
        $name = 'Foo'; // this module's name.
        $template = 'template_name.tpl'; // the name of the module's template
        $view = Zikula_View::getInstance($name);

        // do stuff...

        // add this response to the event stack
        $event->data[$name] = new Zikula_Response_DisplayHook($name, $view, $template);
    }

GENERAL WORKFLOW OF HOOKS
-------------------------
The general workflow of hooks is as follows.

=== Displaying an item ===

When viewing an item of some sort, we want to allow other modules to attach some form of
content to the diplay view.  We simply notify ui.view hooks with the item being displayed
(the subject), the id and the module name as arguments.

The next two hook types, 'creating new items and editing existing items' are considered to be
all part of the same workflow.  There is little point duplicating the bulk of code reuqired
to process create and edit, therefor we should combine them into a single controller and view.
This is because whether creating a new item, or editing an existing item, we're using
essentially the same form.  In 'create' the form starts out empty, and in 'edit' the form
is populated by a database query.  We know if we should validate and commit any input data
if the form was submitted or not.  And lastly, when we process the form on submit, again,
it's the same process that is used to update, the only difference is we might use an
SQL INSERT over an SQL UPDATE.  This is why we can use one controller method and view
for both create and edit actions.

For this reason too, there is no need for separate display and processing methods.  For example
`edit()` to display edit form, and `update()` to validate and update the record, followed by a
redirect simply do not make sense when it can be done easily in one controller method.

=== Creating a new item ===

When when we create an item, essentially, we visit an edit page with no id in the request.
From this we know that the action is not an edit, but a 'create new'.  We can determine
if it's a brand new form or a submitted form by reading the form submit property.
Accordingly, we can notify the system of the hook events.

When displaying a new empty form, we simply trigger a ui.edit event with
    subject=null
    id=null/empty/0
    caller=calling module

When we come to validate a new create form, this means we have received a submit command
in the form.  We can then validate our form and then trigger a validate.edit event with
    subject=null
    id=null/empty/0
    caller=name of calling module
    data=new Zikula_Collection_HookValidationProviders()

The data property of the event can then be tested for the presence of validation errors or not
with $event->getData()->hasErrors().  Together with the form submit the method can decide
if it's safe to commit the data to the database or, if the form needs to be redisplayed with
validation errors.

If it's ok simply commit the form data, then trigger a process.edit event with
    subject=$item
    id=$id
    caller=name of calling module

If the data is not ok, then simply redisplay the template.  The triggered event will pick up
the validation problems automatically as the validation of each handler will persist in
the Zikula_HookHandler instances unless using an outdated workflow where validation method
redirect to display methods, in which case you will have to do validation again.

ui.edit hooks are displayed in the template with
    {notifydisplayhooks eventname='<module>.hook.<area>.ui.edit' subject=$subject id=$id}

=== Editing an existing item ===

When when we edit an item, we visit an edit page with an id in the request and the
controller will retrieve the item to be edited from the database.

We can determine if we should validate and commit the item or just display the item for
editing by reading the form submit property.
Accordingly, we can notify the system of the hook events.

When displaying an edit form, we simply trigger a ui.edit event with
    subject=$item
    id=$item['id']
    caller=calling module

When we come to validate an edit form, this means we have received a submit command
in the form.  We can then validate our form and then trigger a validate.edit event with
    subject=$item
    id=$item['id']
    caller=name of calling module
    data=new Zikula_Collection_HookValidationProviders()

The data property of the event can then be tested for the presence of validation errors or not
with $event->getData()->hasErrors().  Together with the form submit the method can decide
if it's safe to commit the data to the database or, if the form needs to be redisplayed with
validation errors.

If it's ok simply commit the form data, then trigger a process.edit event with
    subject=$item
    id=$id
    caller=name of calling module

If the data is not ok, then simply redisplay the template.  The triggered event will pick up
the validation problems automatically as the validation of each handler will persist in
the Zikula_HookHandler instances unless using an outdated workflow where validation method
redirect to display methods, in which case you will have to do validation again.

ui.edit hooks are displayed in the template with
    {notifydisplayhooks eventname='<module>.hook.<area>.ui.edit' subject=$subject id=$id}

=== Deleting an item ===
There are manu different approaches that can be taken to deleting an item. For example we
can add a delete button to an edit form.  We usually would have a confirmation screen
or we might just use a javascript confirmation.  Generally, we would not want to add
anything extra to a delete confirmation page, but we certainly need to process a delete
action.  Ultimately when a controller (that makes use of hooks) deletes an item, it
must notify the attached modules to prevent orphaned records.  This is done simply by
triggering a hookable event with
    subject=$item
    id=$item['id']
    caller=calling module's name

ui.delete hooks are displayed in the template with
{notifydisplayhooks eventname='<module>.hook.<area>.ui.delete' subject=$subject id=$id}