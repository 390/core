- Change all module templates plugin delimiters to { and }.  For any template
  plugins inside a <script></script> block or a <style></style> block please
  use {{ and }}.

- Module folders now MUST start with a capital letter.

- All plugins with pn have been renamed without the pn prefix.  The pndebug
  plugin has been renamed to zdebug. Please adjust your templates accordingly.

- To accommodate easy transition to the new templates Zikula runs a prefilter
  that will convert the old delimiters to the new, and also remove the pn prefix
  from any template plugin calls.  This will also affect 3rd party module so
  3rd party modules must drop their pn prefix from the actual plugins.  As a
  workaround you can copy the plugin file and rename it and the function inside
  without the prefix.

- You must refactor templates using the 'pndate_format' modifier to 'dateformat'.

- Change all instance is $pnRender = & pnRender::getInstance() to
  $renderer = Renderer::getInstance().

- All use of pnML() and {ml} are both completely deprecated and will not work
  any more because Zikula no longer supports define based language packs.
  Upgrade themes and modules.

- See all deprecated template plugins in lib/legacy/plugins

- Output filtering is now done with safetext, and safehtml modifiers.

- Rename all PNObject* to DBObject*.

- DBUtil::executeSQL used to return a ADODB object but now returns a PHP PDO
  object.  This means any code that previously iterated on the ADODB object
  will now break.  Please use of DBUtil::marshallObjects() after any manual
  SELECT through DBUtil::executeSQL() e.g.:

    [php]
    $res = DBUtil::executeSql ($sql);
    $objectArray = DBUtil::marshallObjects ($res, $ca, ...);

  Alternatively you can use the PDO return object.  PDO is built into PHP so
  accessing the PDO object is considered API complaint.  PDO documentation is
  available at http://php.net/PDO

- The format of config.php has changed, please manually complete the values in
  the supplied config.php - note that base64 encoding is not supposed any more
  and everything must be in plain text (this is because base64 encoding is not
  actually an encryption).

- Theme module APIs theme_userapi_clear_compiled(), theme_userapi_clear_cache(),
  and pnrender_userapi_clear_compiled(), pnrender_userapi_clear_cache() are
  deprecated.  Please use Renderer->clear_compiled(), Renderer->clear_cache() and
  Theme->clear_compiled(), Theme->clear_cache().

- Now you can add a requirement check for your blocks which will display a
  message if it's necessary into the admin panel. eg: the language block will be
  visible only if the multilanguage system is enabled, so for this block a
  requirement message was aded to inform the admin that this block will not be
  visible until he enables the multilanguage system.

- You may now customise the core with Event Handler, these can be loaded in
  config/EventHandlers.  The classes should be the same as the filename and
  extend from CustomEventHandler.

- In modules you can autoload event handlers by calling
  EventManagerUtil::attachCustomHandlers($path) which should be a folder with
  just event handlers, or if you have static method handler just load them
  directly with EventManagerUtil::attach($name, $callable) [see ** below]
  This method could be used to load event handler dynamically from a ConfigVar()
  containing array('name' => $name, 'callable' => $callable);

  ** Note that a callable is in the following format:-
       Foo::bar() = array('Foo', 'bar')
       $foo->bar = array($foo, 'bar')
       myfunction() = 'myfunction'

- Added ability to have OO controllers in modules.  Look at system modules for
  examples. The name of the classes are Modulename_$type (case sensitive).
  The $func argument would be the public methods contained therein.
  Also see the EventHandlers folder which shows how a method can be
  added to the controller via a notifyUntil() events of name
  'controller.method_not_found' and 'controllerapi.method_not_found'
  for APIs.

- OO module controllers will initialise an autoloader for the class so that
  a call to a class Example_DBObject_Users would load
  module/Example/lib/Example/DBObject/Users.php - the class contained should be
  Example_DBObject_Users.

  Please note that because of the use of ModUtil::func() and ModUtil::apiFunc()
  Controller and Controller Apis must be named according to the type in real
  camel case (ucwords).  E.g. type = adminform means the file *must* be names
  Adminform and NOT AdminForm.  The class name would be Modulename_Adminform.

- You may additionally register autoloaders with
  ZLoader::addAutoloader($namespace, $path) where
  $namespace is the first part of the PEAR classname, and $path is
  the path to the containing folder.

- You may now optionally include bootstrap.php in your module root directory.
  This will be loaded during ModUtil::load/ModUtil::loadGeneric() automatically.

- pnMod* now all deprecated see ModUtil::*
- pnUser* deprecated, see UserUtil::*
- pnBlock deprecated, see BlockUtil::*
- pn* deprecated see System::*
- Legacy APIs for BC are stored in legacy/Compat.php and legacy/Api.php

THE FOLLOWING FILE SPECIFICATION HAS CHANGED
    The old ones are still backward compatible but since file scanning is used
    your modules will be more efficient if you change to this format.

    - Rename pninit.php to init.php
    - Rename pntables.php to tables.php (rename internal $modName_pntables to $mod_tables)
    - Rename pnversion.php to version.php
    - Rename pndocs to docs
    - Rename pnincludes to lib/, or lib/vendor if specifying 3rd party libs
    - Rename pnstyle to style
    - Rename pnjavascript to javascript
    - Rename pnblocks to lib/$ModuleName/Block
    - Rename pntemplates to templates

- OO module controllers now have access to convenience where the domain is calculated
  automatically.
    $this->__($msgid)
    $this->__f($msgid, $params)
    $this->_n($singular, $plural, $count)
    $this->_fn($sin, $plu, $n, $params)

- The prefixes are NOT gone for the class function based controllers like pnadmin etc.
  This is deliberate to encourage you to move to OO module controllers.

- If you need to make browser hack please use the block made for the case, e.g.
  {browserhack condition="if lte IE 7"}foo{/browserback}
  This block also takes assign="var" so you can assign rather than display.

- If you use WorkflowUtil, there are four changes for Zikula 1.3:
   - getActionsByStateArray:
       is not deprecated.
   - getActionsByState:
       now returns all the action data as array($action.id => $action),
       instead of array(id => id).
   - getActionTitlesByState:
       useful method to build the buttons for the current state,
       returning the allowed actions as array($action.id => $action.title).
   - getActionsForObject:
       now returns the result of getActionsByState.
   If you used values, replace them with the result keys, and take advantage
   of the action data now available.

- Refactoring module code:
  - With the following instruction you need to remove all prefixed from function
    names, like function Module_admin_foo() becomes public function foo()
  - Any methods which should not be exposed, ie callable from the URL should be
    make protected or private.

    - Blocks: refactor blocks into lib/$modname/Block/$name.  e.g.
      MyMod/blocks/foo.php becomes MyMod/lib/MyMod/Block/Foo.php
      Encapsulate in class MyMod_Block_Foo extends Zikula_Block

    - Controllers: refactor pnuser.php (etc) to lib/$modname/$name e.g.
      MyMod/pnuser.php becomes MyMod/lib/MyMod/User.php
      Encapsulate in class MyMod_User extends Zikula_Controller

    - Apis: refactor pnuserapi.php (etc) to lib/$modname/Api/$name e.g.
      MyMod/pnuserapi.php becomes MyMod/lib/MyMod/Api/User.php
      Encapsulate in class MyMod_Api_User extends Zikula_Api

- If you use categorisation please refactor to use the following classes:
    PNCategory => Categories_DBObject_Category
    PNCategoryArray => Categories_DBObject_CategoryArray
    PNCategoryRegistry => Categories_DBObject_Registry
    PNCategoryRegistryArray => Categories_DBObject_RegistryArray

    Remove all references to Loader::loadClassFromModule, Loader::loadClassFromModuleArray()

- Remove any references to Loader::loadClass() - classes are loaded automatically.

- Remove {addition_headers} plugin from any themes, this doesn't work anymore.

- You may now use the following convenience methods from OO controllers and APIs.
    (see lib/Zikula/Base.php for details)

    $this->throwNotFound()
    $this->throwNotFoundIf()
    $this->throwNotFoundUnless()

    $this->throwForbidden()
    $this->throwForbiddenIf()
    $this->throwForbiddenUnless()

    $this->redirect()
    $this->redirectIf()
    $this->redirectUnless()

- The gettext plugin now does not need domain= set at all for modules.

