You may register event listeners with EventUtil::attach($name, $handler);

You may issue events with

    [php]
    $event = new Zikula_Event($name, $subject, $args);
    EventUtil::notify($event);

Any changes made to the $event object or $subject in the handlers will be carry over (standard PHP5 behaviour).

List of event names you can take advantage of in the core.
core.preinit
    Occurs after the config.php is loaded.

core.init
    Occurs after each System::init() stage, $event['stage'] contains the stage.
    To check if the handler should execute, do if($event['stage'] & System::CORE_STAGES_*)

core.postinit
    Occurs just before System::init() exists from normal execution.

api.method_not_found called in instances of Zikula_Api from __call()
    Receives arguments from __call($method, argument) as $args
    $event['method'] = the method which didnt exist in the main class.
    $event['args'] = the arguments that were passes
    The event subject is the class where the method was not found.
    Must exit if $event['method'] does not match whatever the handler expects.
    Modify $event->data and $event->setNotify().

controller.method_not_found called in instances of Zikula_Controller from __call()
    Receives arguments from __call($method, argument) as $args
    $event['method'] = the method which didnt exist in the main class.
    $event['args'] = the arguments that were passes
    The event subject is the class where the method was not found.
    Must exit if $event['method'] does not match whatever the handler expects.
    Modify $event->data and $event->setNotify().

user.login
    Occurs right after login, $event['user'] is the UID of the logged in user.
    $event['authmodule'] with the name of the module that authenticated.
    $event['loginid'] with the equivalent of the user name that authenticated (not all authmodules use loginid,
    and therefore this may not be supplied). If authentication was attempted with Zikula's Users module, then
    $event['loginid'] will contain the uname logged in.

user.logout
    Occurs right after logout, $event['user'] is the UID of the user who logged out.
    $event['authmodule'] with the name of the module that logged out (in addition to Zikula core).

user.logout.failed
    Occurs right after logout, $event['user'] is the UID of the user who attempted to log out.
    $event['authmodule'] with the name of the module that attempted and failed to log out.

user.login.failed
    Occurs on login failure. $event['authmodule'] with the name of the module that attempted to authenticate.
    $event['loginid'] with the equivalent of the user name that was attempted (not all authmodules use loginid,
    and therefore this may not be supplied). If authentication was attempted with Zikula's Users module, then
    $event['loginid'] will contain the uname attempted.

user.gettheme
    This is invoked with notifyUntil so you should execute $event->setNotified() in the event handler.
    receives $event['name'] the chosen theme name, it can modify the name.

module.postloadgeneric
    receives the args array('modinfo' => $modinfo, 'type' => $type, 'force' => $force, 'api' => $api).

module.preexecute
    Occurs in ModUtil::exec() after function call with the following args:
    array('modname' => $modname, 'modfunc' => $modfunc, 'args' => $args, 'modinfo' => $modinfo, 'type' => $type, 'api' => $api)

module.postexecute
    Occurs in ModUtil::exec() after function call with the following args:
    array('modname' => $modname, 'modfunc' => $modfunc, 'args' => $args, 'modinfo' => $modinfo, 'type' => $type, 'api' => $api)
    receives the modules output with $event->getData();
    can modify this output with $event->serData($data);

module.type_not_found if $type is not found in ModUtil::exec() (e.g. no admin.php)
    This is for classic module types only.
    array('modname' => $modname, 'modfunc' => $modfunc, 'args' => $args, 'modinfo' => $modinfo, 'type' => $type, 'api' => $api)
    This kind of eventhandler should
        1. Check $event['modfunc'] to see if it should run else exit silently.
        2. Do something like $result = {$event['modfunc']}({$event['args'});
        3. Save the result $event->setData($result).
        4. $event->setNotify().
        5. return void

module.postcallhooks.extrainfo

    $subject
    $event->data is $extrainfo
    $args = 'gui' => $gui,
            'hookobject' => $hookobject,
            'hookaction' => $hookaction,
            'hookid' => $hookid,
            'extrainfo' => $extrainfo,
            'implode' => $implode,
            'args' => $args

module.postcallhooks.output

    $subject
    $event->data is $output
    $args = 'gui' => $gui,
            'hookobject' => $hookobject,
            'hookaction' => $hookaction,
            'hookid' => $hookid,
            'extrainfo' => $extrainfo,
            'implode' => $implode,
            'output' => $output,
            'args' => $args

module.custom_classname in order to override the classname calculated in ModUtil::exec().
    In order to override a pre-existing controller/api method, use this event type to override the class name that is loaded.
    This allows to override the methods using inheritance.
    Receives no subject, args of array('modname' => $modname, 'modinfo' => $modinfo, 'type' => $type, 'api' => $api)
    and 'event data' of $className.  This can be altered by settings $event->setData() followed by $event->setNotified().

theme.init
    Occurs just before Theme#__construct() exits.  Subject is $this, args are 
    array('theme' => $theme, 'usefilters' => $usefilters, 'themeinfo' => $themeinfo)

theme.prefooter
    Occurs in Theme::themefooter() just after getting the $maincontent.  The
    event subject is $this (Theme instance) and has event data which you can modify
    with $event->setData() in the event handler.

render.init
    Occurs just before Renderer#__construct() exists. Subject is $this, args are array('module' => $module, 'modinfo' => $modinfo, 'themeinfo' => $themeinfo)

dbobject.pre/post*
    takes subject of $this.

systemerror
    args gets array('errorno' => $errno, 'errstr' => $errstr, 'errfile' => $errfile, 'errline' => $errline, 'errcontext' => $errcontext)

controller.method_not_found
    args are method (method name), 'args' = $args

controller_api.method_not_found
    args are method (method name). 'args' = $args

mailer.sendmessage
    Inkoked from Mailer_Api_User#sendmessage. Subject is Mailer_Api_User with $args.
    This is a notifyUntil event so the event must $event->setNotified() and set any
    return data into $event->data, or $event->setData()

setup.errorreporting
    Invoked during System::init().  Used to activate set_error_handler().  Event must setNotified().

pageutil.addvar_filter
    Used to override things like system or module stylesheets or javascript.
    Subject is the $varname, and $event->data an array of values to be modified by the filter.
    Simply test with something like
        if ($key = array_search($event->data, 'system/Users/javascript/somescript.js')) {
            $event->data[$key] = 'config/javascript/myoverride.js';
        }
    This single filter can be used to override all css or js scripts or any other var types
    sent to PageUtil::addVar().

system.outputfilter
    Filter type event for output filter HTML sanitisation
