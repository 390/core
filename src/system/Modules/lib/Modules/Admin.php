<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) 2001, Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id$
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_System_Modules
 * @subpackage Modules
 */

class Modules_Admin extends Zikula_Controller
{
    /**
     * Modules Module main admin function
     * @author Jim McDonald
     * @return string HTML output string
     */
    public function main()
    {
        // Security check will be done in view()
        return $this->view();
    }

    /**
     * Modules_admin_modify - modify a module
     * @author Jim McDonald
     * @return string HTML output string
     */
    public function modify()
    {
        $id = (int) FormUtil::getPassedValue('id', null, 'GET');
        if (!is_numeric($id)) {
            return LogUtil::registerArgsError(ModUtil::url('Modules', 'admin', 'view'));
        }

        $obj = ModUtil::getInfo($id);
        if (!isset($id) || $obj == false) {
            return LogUtil::registerError($this->__('Error! No such module ID exists.'),
                    404,
                    ModUtil::url('Modules', 'admin', 'modify', array('id' => $id)));
        }

        if (!SecurityUtil::checkPermission('Modules::', "$obj[name]::$id", ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $restore = (bool)FormUtil::getPassedValue('restore', false, 'GET');
        if ($restore) {
            $modversion = array();
            // load the version array
            $baseDir = ($obj['type'] == ModUtil::TYPE_SYSTEM) ? 'system' : 'modules';
            $version = "$baseDir/$obj[directory]/version.php";
            $pnversion = "$baseDir/$obj[directory]/pnversion.php";

            if (is_readable($version)) {
                include $version;
            } elseif (is_readable($pnversion)) {
                include $pnversion;
            } else {
                return LogUtil::registerError($this->__('Error! Unable to load version file for this module.'),
                        404,
                        ModUtil::url('Modules', 'admin', 'modify', array('id' => $id)));
            }

            // load defaults
            $name = (isset($modversion['name']) ? $modversion['name'] : '');
            $displayname = (isset($modversion['displayname']) ? $modversion['displayname'] : $name);
            $url = (isset($modversion['url']) ? $modversion['url'] : $displayname);
            $description = (isset($modversion['description']) ? $modversion['description'] : '');

            $obj = array(
                    'id' => $id,
                    'displayname' => $displayname,
                    'url' => $url,
                    'description' => $description);
        }

        $this->renderer->setCaching(false);

        $this->renderer->assign($obj);

        // Return the output that has been generated by this function
        return $this->renderer->fetch('modules_admin_modify.tpl');
    }

    /**
     * Modules_admin_update - update a module
     * @author Jim McDonald
     * @return string HTML output string
     * @param int 'id' module id
     * @param string 'newdisplayname' new display name of the module
     * @param string 'newdescription' new description of the module
     */
    public function update()
    {
        // Get parameters
        $id = (int) FormUtil::getPassedValue('id', null, 'POST');
        $newdisplayname = FormUtil::getPassedValue('newdisplayname', null, 'POST');
        $newdescription = FormUtil::getPassedValue('newdescription', null, 'POST');
        $newurl = FormUtil::getPassedValue('newurl', null, 'POST');

        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // Pass to API
        if (ModUtil::apiFunc('Modules', 'admin', 'update', array(
        'id' => $id,
        'displayname' => $newdisplayname,
        'description' => $newdescription,
        'url' => $newurl))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Saved module information.'));
        } else {
            return System::redirect(ModUtil::url('Modules', 'admin', 'modify', array('id' => $id)));
        }

        return System::redirect(ModUtil::url('Modules', 'admin', 'view'));
    }

    /**
     * Modules_admin_update hooks
     * update hooks for a module
     * @author Mark West
     * @param int 'id' module id
     * @return bool true if successful, false otherwise
     */
    public function updatehooks()
    {
        // Get parameters
        $id = (int) FormUtil::getPassedValue('id', null, 'REQUEST');

        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // Pass to API
        if (ModUtil::apiFunc('Modules', 'admin', 'updatehooks', array(
        'id' => $id))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Saved module information.'));
        }

        return System::redirect(ModUtil::url('Modules', 'admin', 'view'));
    }

    /**
     * Modules_admin_update hooks, extended version
     * update hooks for a module
     * @author Mark West
     * @author Frank Schummertz
     * @param int 'id' module id
     * @return bool true if successful, false otherwise
     */
    public function extendedupdatehooks()
    {
        // Get parameters
        $id = (int) FormUtil::getPassedValue('id', null, 'REQUEST');

        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // Pass to API
        if (ModUtil::apiFunc('Modules', 'admin', 'extendedupdatehooks', array(
        'id' => $id))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Saved module information.'));
        }

        return System::redirect(ModUtil::url('Modules', 'admin', 'view'));
    }

    /**
     * Modules_admin_view - list modules and current settings
     * @author Jim McDonald
     * @return string HTML output string
     */
    public function view()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $this->renderer->setCaching(false);

        // Get parameters from whatever input we need.
        $startnum = (int) FormUtil::getPassedValue('startnum', null, 'GET');
        $letter = FormUtil::getPassedValue('letter', null, 'GET');
        $state = FormUtil::getPassedValue('state', (!strstr(System::serverGetVar('HTTP_REFERER'), 'module=Modules')) ? null : SessionUtil::getVar('state', null), 'GETPOST');
        $sort = FormUtil::getPassedValue('sort', (!strstr(System::serverGetVar('HTTP_REFERER'), 'module=Modules')) ? null : SessionUtil::getVar('sort', null), 'GET');

        // do some clean up
        SessionUtil::delVar('interactive_init');
        SessionUtil::delVar('interactive_remove');
        SessionUtil::delVar('interactive_upgrade');

        if ($GLOBALS['ZConfig']['Multisites']['multi'] != 1 || ($GLOBALS['ZConfig']['Multisites']['mainSiteURL'] == FormUtil::getPassedValue('siteDNS', null, 'GET') && $GLOBALS['ZConfig']['Multisites']['basedOnDomains'] == 0) || ($GLOBALS['ZConfig']['Multisites']['mainSiteURL'] == $_SERVER['HTTP_HOST'] && $GLOBALS['ZConfig']['Multisites']['basedOnDomains'] == 1)) {
            // always regenerate modules list
            $filemodules = ModUtil::apiFunc('Modules', 'admin', 'getfilemodules');
            $inconsistencies = ModUtil::apiFunc('Modules', 'admin', 'checkconsistency', array(
                    'filemodules' => $filemodules));

            if (!(empty($inconsistencies['errors_modulenames']) && empty($inconsistencies['errors_displaynames']))) {
                $this->renderer->assign('errors_modulenames', $inconsistencies['errors_modulenames'])
                               ->assign('errors_displaynames', $inconsistencies['errors_displaynames']);

                return $this->renderer->fetch('modules_admin_regenerate_errors.tpl');
            }

            // No inconsistencies, so we can regenerate modules
            $defaults = (int) FormUtil::getPassedValue('defaults', false, 'GET');
            if (!ModUtil::apiFunc('Modules', 'admin', 'regenerate', array('filemodules' => $filemodules, 'defaults' => $defaults))) {
                LogUtil::registerError($this->__('Errors were detected regenerating the modules list from file system.'));
            }
        }

        // assign the state filter
        $this->renderer->assign('state', $state);

        // Get list of modules
        $mods = ModUtil::apiFunc('Modules', 'admin', 'listmodules', array(
                'startnum' => $startnum,
                'letter' => $letter,
                'state' => $state,
                'numitems' => $this->getVar('itemsperpage'),
                'sort' => $sort));

        // generate an auth key to use in urls
        $authid = SecurityUtil::generateAuthKey();

        $moduleinfo = array();
        if (!empty($mods)) {
            foreach ($mods as $mod) {
                // Add applicable actions
                $actions = array();

                if (SecurityUtil::checkPermission('Modules::', "$mod[name]::$mod[id]", ACCESS_ADMIN)) {
                    switch ($mod['state']) {
                        case ModUtil::STATE_ACTIVE:
                            $actions[] = array(
                                    'url' => ModUtil::url('Modules', 'admin', 'deactivate', array(
                                    'id' => $mod['id'],
                                    'startnum' => $startnum,
                                    'authid' => $authid,
                                    'letter' => $letter,
                                    'state' => $state)),
                                    'image' => 'folder_grey.gif',
                                    'title' => $this->__('Deactivate'));
                            $actions[] = array(
                                    'url' => ModUtil::url('Modules', 'admin', 'hooks', array(
                                    'id' => $mod['id'])),
                                    'image' => 'attach.gif',
                                    'title' => $this->__('Hook settings'));

                            if(PluginUtil::hasModulePlugins($mod['name'])) {
                                $actions[] = array(
                                        'url' => ModUtil::url('Modules', 'admin', 'viewPlugins', array(
                                        'bymodule' => $mod['name'])),
                                        'image' => 'blockdevice.gif',
                                        'title' => $this->__('Plugins'));
                            }
                            break;
                        case ModUtil::STATE_INACTIVE:
                            $actions[] = array(
                                    'url' => ModUtil::url('Modules', 'admin', 'activate', array(
                                    'id' => $mod['id'],
                                    'startnum' => $startnum,
                                    'authid' => $authid,
                                    'letter' => $letter,
                                    'state' => $state)),
                                    'image' => 'folder_green.gif',
                                    'title' => $this->__('Activate'));
                            $actions[] = array(
                                    'url' => ModUtil::url('Modules', 'admin', 'remove', array(
                                    'id' => $mod['id'],
                                    'startnum' => $startnum,
                                    'authid' => $authid,
                                    'letter' => $letter,
                                    'state' => $state)),
                                    'image' => '14_layer_deletelayer.gif',
                                    'title' => $this->__('Remove module'));
                            break;
                        case ModUtil::STATE_MISSING:
                            $actions[] = array(
                                    'url' => ModUtil::url('Modules', 'admin', 'remove', array(
                                    'id' => $mod['id'],
                                    'startnum' => $startnum,
                                    'authid' => $authid,
                                    'letter' => $letter,
                                    'state' => $state)),
                                    'image' => '14_layer_deletelayer.gif',
                                    'title' => $this->__('Remove module'));
                            break;
                        case ModUtil::STATE_UPGRADED:
                            $actions[] = array(
                                    'url' => ModUtil::url('Modules', 'admin', 'upgrade', array(
                                    'id' => $mod['id'],
                                    'startnum' => $startnum,
                                    'authid' => $authid,
                                    'letter' => $letter,
                                    'state' => $state)),
                                    'image' => 'agt_update-product.gif',
                                    'title' => $this->__('Upgrade'));
                            break;
                        case ModUtil::STATE_INVALID:
                        // nothing to do, remove manually
                        // future wish list, allow removal if FS is writable
                        /*
                        $actions[] = array(
                            'url' => ModUtil::url('Modules', 'admin', 'remove', array(
                                'id' => $mod['id'],
                                'startnum' => $startnum,
                                'authid' => $authid,
                                'letter' => $letter,
                                'state' => $state)),
                            'image' => '14_layer_deletelayer.gif',
                            'title' => $this->__('Remove module')); */
                            break;
                        case ModUtil::STATE_NOTALLOWED:
                            $actions[] = array(
                                    'url' => ModUtil::url('Modules', 'admin', 'remove', array(
                                    'id' => $mod['id'],
                                    'startnum' => $startnum,
                                    'authid' => $authid,
                                    'letter' => $letter,
                                    'state' => $state)),
                                    'image' => '14_layer_deletelayer.gif',
                                    'title' => $this->__('Remove module'));
                            break;
                        case ModUtil::STATE_UNINITIALISED:
                        default:
                            if ($mod['state'] < 10) {
                                $actions[] = array(
                                        'url' => ModUtil::url('Modules', 'admin', 'initialise', array(
                                        'id' => $mod['id'],
                                        'startnum' => $startnum,
                                        'authid' => $authid,
                                        'letter' => $letter,
                                        'state' => $state)),
                                        'image' => 'agt_update_misc.gif',
                                        'title' => $this->__('Install'));
                                if ($GLOBALS['ZConfig']['Multisites']['multi'] != 1 || ($GLOBALS['ZConfig']['Multisites']['mainSiteURL'] == FormUtil::getPassedValue('siteDNS', null, 'GET') && $GLOBALS['ZConfig']['Multisites']['basedOnDomains'] == 0) || ($GLOBALS['ZConfig']['Multisites']['mainSiteURL'] == $_SERVER['HTTP_HOST'] && $GLOBALS['ZConfig']['Multisites']['basedOnDomains'] == 1)) {
                                    $actions[] = array(
                                            'url' => ModUtil::url('Modules', 'admin', 'remove', array(
                                            'id' => $mod['id'],
                                            'startnum' => $startnum,
                                            'authid' => $authid,
                                            'letter' => $letter,
                                            'state' => $state)),
                                            'image' => '14_layer_deletelayer.gif',
                                            'title' => $this->__('Remove module'));
                                }
                            } else {
                                $actions[] = array(
                                        'url' => ModUtil::url('Modules', 'admin', 'compinfo', array(
                                        'id' => $mod['id'],
                                        'startnum' => $startnum,
                                        'authid' => $authid,
                                        'letter' => $letter,
                                        'state' => $state)),
                                        'image' => 'info.gif',
                                        'title' => $this->__('Incompatibility information'));
                            }
                            break;
                    }
                    // RNG: can't edit an invalid module
                    if ($mod['state'] != ModUtil::STATE_INVALID)
                        $actions[] = array(
                                'url' => ModUtil::url('Modules', 'admin', 'modify', array(
                                'id' => $mod['id'])),
                                'image' => 'xedit.gif',
                                'title' => $this->__('Edit'));
                }

                // Translate state
                switch ($mod['state']) {
                    case ModUtil::STATE_INACTIVE:
                        $status = $this->__('Inactive');
                        $statusimage = 'yellowled.gif';
                        break;
                    case ModUtil::STATE_ACTIVE:
                        $status = $this->__('Active');
                        $statusimage = 'greenled.gif';
                        break;
                    case ModUtil::STATE_MISSING:
                        $status = $this->__('Files missing');
                        $statusimage = 'redled.gif';
                        break;
                    case ModUtil::STATE_UPGRADED:
                        $status = $this->__('New version');
                        $statusimage = 'redled.gif';
                        break;
                    case ModUtil::STATE_INVALID:
                        $status = $this->__('Invalid structure');
                        $statusimage = 'redled.gif';
                        break;
                    case ModUtil::STATE_NOTALLOWED:
                        $status = $this->__('Not allowed');
                        $statusimage = 'redled.gif';
                        break;
                    case ModUtil::STATE_UNINITIALISED:
                    default:
                        if ($mod['state'] < 10) {
                            $status = $this->__('Not installed');
                        } else {
                            $status = $this->__('Incompatible version');
                        }
                        $statusimage = 'redled.gif';
                        break;
                }

                // get new version number for ModUtil::STATE_UPGRADED
                if($mod['state'] == ModUtil::STATE_UPGRADED) {
                    $rootdirs = array(3 => 'system', 2 => 'modules', 7 => 'apps');
                    $modkey = $rootdirs[$mod['type']].'/'.$mod['directory'];
                    $mod['newversion'] = $filemodules[$modkey]['version'];
                }

                $moduleinfo[] = array(
                        'modinfo' => $mod,
                        'status' => $status,
                        'statusimage' => $statusimage,
                        'options' => $actions);

            }
        }

        $this->renderer->assign('multi', $GLOBALS['ZConfig']['Multisites']['multi'])
                       ->assign('modules', $moduleinfo);

        // Assign the values for the smarty plugin to produce a pager.
        $this->renderer->assign('pager', array(
                'numitems' => ModUtil::apiFunc('Modules', 'admin', 'countitems', array(
                'letter' => $letter,
                'state' => $state)),
                'itemsperpage' => $this->getVar('itemsperpage')));

        // Return the output that has been generated by this function
        return $this->renderer->fetch('modules_admin_view.tpl');
    }

    /**
     * Modules_admin_view - list modules and current settings
     *
     * This function is an alias to modules_admin_view as pnphpbb calls this
     * function name directly on the install
     *
     * @author Jim McDonald
     * @see modules_admin_view
     * @return string HTML output string
     */
    public function listview()
    {
        return $this->view();
    }

    /**
     * Initialise a module
     * @author Jim McDonald
     * @param int 'id' module id
     * @return bool true
     */
    public function initialise()
    {
        // Security and sanity checks
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // Get parameters from whatever input we need
        $id = (int) FormUtil::getPassedValue('id', 0);
        $objectid = (int) FormUtil::getPassedValue('objectid', 0);
        $confirmation = (bool) FormUtil::getPassedValue('confirmation', false);
        $startnum = (int) FormUtil::getPassedValue('startnum');
        $letter = FormUtil::getPassedValue('letter');
        $state = FormUtil::getPassedValue('state');
        if ($objectid) {
            $id = $objectid;
        }

        // assign any dependencies - filtering out non-active module dependents
        // when getting here without a valid id we are in interactive init mode and then
        // the dependencies checks have been done before already
        if ($id != 0) {
            $dependencies = ModUtil::apiFunc('Modules', 'admin', 'getdependencies', array(
                    'modid' => $id));
            $modulenotfound = false;
            if (empty($confirmation) && $dependencies) {
                foreach ($dependencies as $key => $dependency) {
                    $dependencies[$key]['insystem'] = true;
                    $modinfo = ModUtil::getInfoFromName($dependency['modname']);
                    if (ModUtil::available($dependency['modname'])) {
                        unset($dependencies[$key]);
                    } elseif (!empty($modinfo)) {
                        $dependencies[$key] = array_merge($dependencies[$key], $modinfo);
                    } else {
                        $dependencies[$key]['insystem'] = false;
                        $modulenotfound = true;
                    }
                }

                // we have some dependencies so let's warn the user about these
                if (!empty($dependencies)) {
                    return $this->renderer->assign('id', $id)
                                          ->assign('dependencies', $dependencies)
                                          ->assign('modulenotfound', $modulenotfound)
                                          ->fetch('modules_admin_initialise.tpl');
                }
            } else {
                $dependencies = (array) FormUtil::getPassedValue('dependencies', array(), 'POST');
            }
        }

        $interactive_init = SessionUtil::getVar('interactive_init');
        $interactive_init = (empty($interactive_init)) ? false : true;
        if ($interactive_init == false) {
            SessionUtil::setVar('modules_id', $id);
            SessionUtil::setVar('modules_startnum', $startnum);
            SessionUtil::setVar('modules_letter', $letter);
            SessionUtil::setVar('modules_state', $state);
            $activate = false;
        } else {
            $id = SessionUtil::getVar('modules_id');
            $startnum = SessionUtil::getVar('modules_startnum');
            $letter = SessionUtil::getVar('modules_letter');
            $state = SessionUtil::getVar('modules_state');
            $activate = (bool) FormUtil::getPassedValue('activate');
        }

        if (empty($id) || !is_numeric($id)) {
            return LogUtil::registerError($this->__('Error! No module ID provided.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }

        // initialise and activate any dependencies
        if (isset($dependencies) && is_array($dependencies)) {
            foreach ($dependencies as $dependency) {
                if (!ModUtil::apiFunc('Modules', 'admin', 'initialise', array(
                'id' => $dependency))) {
                    return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                            'startnum' => $startnum,
                            'letter' => $letter,
                            'state' => $state)));
                }
                if (!ModUtil::apiFunc('Modules', 'admin', 'setstate', array(
                'id' => $dependency,
                'state' => ModUtil::STATE_ACTIVE))) {
                    return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                            'startnum' => $startnum,
                            'letter' => $letter,
                            'state' => $state)));
                }
            }
        }

        // Now we've initialised the dependencies initialise the main module
        $res = ModUtil::apiFunc('Modules', 'admin', 'initialise', array(
                'id' => $id,
                'interactive_init' => $interactive_init));
        if (is_bool($res) && $res == true) {
            // Success
            SessionUtil::delVar('modules_id');
            SessionUtil::delVar('modules_startnum');
            SessionUtil::delVar('modules_letter');
            SessionUtil::delVar('modules_state');
            SessionUtil::delVar('interactive_init');
            LogUtil::registerStatus($this->__('Done! Installed module.'));

            if ($activate == true) {
                if (ModUtil::apiFunc('Modules', 'admin', 'setstate', array(
                'id' => $id,
                'state' => ModUtil::STATE_ACTIVE))) {
                    // Success
                    LogUtil::registerStatus($this->__('Done! Activated module.'));
                }
            }
            return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                    'startnum' => $startnum,
                    'letter' => $letter,
                    'state' => $state)));
        } elseif (is_bool($res)) {
            return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                    'startnum' => $startnum,
                    'letter' => $letter,
                    'state' => $state)));
        } else {
            return $res;
        }
    }

    /**
     * Activate a module
     * @author Jim McDonald
     * @param int 'id' module id
     * @return bool true
     */
    public function activate()
    {
        // Security and sanity checks
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        $id = (int) FormUtil::getPassedValue('id', null, 'GET');
        $startnum = (int) FormUtil::getPassedValue('startnum', null, 'GET');
        $letter = FormUtil::getPassedValue('letter', null, 'GET');
        $state = FormUtil::getPassedValue('state', null, 'GET');
        if (empty($id) || !is_numeric($id)) {
            return LogUtil::registerError($this->__('Error! No module ID provided.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }

        $moduleinfo = ModUtil::getInfo($id);
        if ($moduleinfo['state'] == 6) {
            LogUtil::registerError($this->__('Error! Module not allowed.'));
            return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                    'startnum' => $startnum,
                    'letter' => $letter,
                    'state' => $state)));
        }

        // Update state
        if (ModUtil::apiFunc('Modules', 'admin', 'setstate', array(
        'id' => $id,
        'state' => ModUtil::STATE_ACTIVE))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Activated module.'));
        }

        return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                'startnum' => $startnum,
                'letter' => $letter,
                'state' => $state)));
    }

    /**
     * Upgrade a module
     * @author Jim McDonald
     * @param int 'id' module id
     * @return bool true
     */
    public function upgrade()
    {
        // Security and sanity checks
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        $interactive_upgrade = SessionUtil::getVar('interactive_upgrade');
        $interactive_upgrade = (empty($interactive_upgrade)) ? false : true;
        if ($interactive_upgrade == false) {
            $id = (int) FormUtil::getPassedValue('id', null, 'GET');
            $startnum = (int) FormUtil::getPassedValue('startnum', null, 'GET');
            $letter = FormUtil::getPassedValue('letter', null, 'GET');
            $state = FormUtil::getPassedValue('state', null, 'GET');
            SessionUtil::setVar('modules_id', $id);
            SessionUtil::setVar('modules_startnum', $startnum);
            SessionUtil::setVar('modules_letter', $letter);
            SessionUtil::setVar('modules_state', $state);
            $activate = false;
        } else {
            $id = SessionUtil::getVar('modules_id');
            $startnum = SessionUtil::getVar('modules_startnum');
            $letter = SessionUtil::getVar('modules_letter');
            $state = SessionUtil::getVar('modules_state');
            $activate = (bool) FormUtil::getPassedValue('activate', null, 'POST');
        }
        if (empty($id) || !is_numeric($id)) {
            return LogUtil::registerError($this->__('Error! No module ID provided.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }

        // Upgrade module
        $res = ModUtil::apiFunc('Modules', 'admin', 'upgrade', array(
                'id' => $id,
                'interactive_upgrade' => $interactive_upgrade));
        if (is_bool($res) && $res == true) {
            // Success
            SessionUtil::delVar('modules_id');
            SessionUtil::delVar('modules_startnum');
            SessionUtil::delVar('modules_letter');
            SessionUtil::delVar('modules_state');
            SessionUtil::setVar('interactive_upgrade', false);
            LogUtil::registerStatus($this->__('New version'));
            if ($activate == true) {
                if (ModUtil::apiFunc('Modules', 'admin', 'setstate', array(
                'id' => $id,
                'state' => ModUtil::STATE_ACTIVE))) {
                    // Success
                    LogUtil::registerStatus($this->__('Activated'));
                }
            }

            // Clear the Renderer cached/compiled files and Themes cached/compiled/cssjs combination files
            $Theme = Theme::getInstance('Theme');
            $Theme->clear_compiled();
            $Theme->clear_all_cache();
            $Theme->clear_cssjscombinecache();

            $this->renderer->clear_compiled();
            $this->renderer->clear_all_cache();

            return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                    'startnum' => $startnum,
                    'letter' => $letter,
                    'state' => $state)));
        } elseif (is_bool($res)) {
            return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                    'startnum' => $startnum,
                    'letter' => $letter,
                    'state' => $state)));
        } else {
            return $res;
        }
    }

    /**
     * Deactivate a module
     * @author Jim McDonald
     * @param int 'id' module id
     * @return bool true
     */
    public function deactivate()
    {
        // Security and sanity checks
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        $id = (int) FormUtil::getPassedValue('id', null, 'GET');
        $startnum = (int) FormUtil::getPassedValue('startnum', null, 'GET');
        $letter = FormUtil::getPassedValue('letter', null, 'GET');
        $state = FormUtil::getPassedValue('state', null, 'GET');
        if (empty($id) || !is_numeric($id)) {
            return LogUtil::registerError($this->__('Error! No module ID provided.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }

        // check if the modules is the systems start module
        $modinfo = ModUtil::getInfo($id);
        if ($modinfo == false) {
            return LogUtil::registerError($this->__('Error! No such module ID exists.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }
        $startmod = System::getVar('startpage');
        if ($startmod == $modinfo['name']) {
            return LogUtil::registerError($this->__('Error! This module is currently set as the site\'s home page. You must choose another module for the home page before you can deactivate this one.'), null, ModUtil::url('Modules', 'admin', 'view'));
        }

        $coremodules = array(
                'Modules',
                'Permissions',
                'Groups',
                'Blocks',
                'ObjectData',
                'Users',
                'Theme',
                'Admin',
                'Settings',
                'Categories');
        if (in_array($modinfo['name'], $coremodules)) {
            return LogUtil::registerError($this->__('Error! You cannot deactivate this module. It is a mandatory core module, and is needed by the system.'), null, ModUtil::url('Modules', 'admin', 'view'));
        }

        // Update state
        if (ModUtil::apiFunc('Modules', 'admin', 'setstate', array(
        'id' => $id,
        'state' => ModUtil::STATE_INACTIVE))) {
            // Success
            LogUtil::registerStatus($this->__('Done! Deactivated module.'));
        }

        return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                'startnum' => $startnum,
                'letter' => $letter,
                'state' => $state)));
    }

    /**
     * Remove a module
     * @author Jim McDonald
     * @param int 'id' module id
     * @return bool true if successful
     */
    public function remove()
    {
        // Get parameters from whatever input we need
        $id = (int) FormUtil::getPassedValue('id', 0);
        $objectid = (int) FormUtil::getPassedValue('objectid', 0);
        $confirmation = (bool) FormUtil::getPassedValue('confirmation', false);
        $dependents = (array) FormUtil::getPassedValue('dependents');
        $startnum = (int) FormUtil::getPassedValue('startnum');
        $letter = FormUtil::getPassedValue('letter');
        $state = FormUtil::getPassedValue('state');
        if ($objectid) {
            $id = $objectid;
        }

        $interactive_remove = SessionUtil::getVar('interactive_remove');
        $interactive_remove = (empty($interactive_remove)) ? false : true;

        if ($interactive_remove == false) {
            SessionUtil::setVar('modules_id', $id);
            SessionUtil::setVar('modules_startnum', $startnum);
            SessionUtil::setVar('modules_letter', $letter);
            SessionUtil::setVar('modules_state', $state);
        } else {
            $id = SessionUtil::getVar('modules_id');
            $startnum = SessionUtil::getVar('modules_startnum');
            $letter = SessionUtil::getVar('modules_letter');
            $state = SessionUtil::getVar('modules_state');
            $confirmation = 1;
        }

        if (empty($id) || !is_numeric($id) || !ModUtil::getInfo($id)) {
            return LogUtil::registerError($this->__('Error! No module ID provided.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }

        // Check for confirmation.
        if (empty($confirmation)) {
            // No confirmation yet
           $this->renderer->setCaching(false);

            // Add a hidden field for the item ID to the output
            $this->renderer->assign('id', $id);

            // assign any dependencies - filtering out non-active module dependents
            $dependents = ModUtil::apiFunc('Modules', 'admin', 'getdependents', array(
                    'modid' => $id));
            foreach ($dependents as $key => $dependent) {
                $modinfo = ModUtil::getInfo($dependent['modid']);
                if (!ModUtil::available($modinfo['name'])) {
                    unset($dependents[$key]);
                } else {
                    $dependents[$key] = array_merge($dependents[$key], $modinfo);
                }
            }
            // check the blocks module for existing blocks
            $blocks = ModUtil::apiFunc('Blocks', 'user', 'getall', array(
                    'modid' => $id));
            $this->renderer->assign('hasBlocks', count($blocks));

            $this->renderer->assign('dependents', $dependents)
                           ->assign('startnum', $startnum)
                           ->assign('letter', $letter)
                           ->assign('state', $state);

            // Return the output that has been generated by this function
            return $this->renderer->fetch('modules_admin_remove.tpl');
        }

        // If we get here it means that the user has confirmed the action


        // Security and sanity checks
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // remove dependent modules
        foreach ($dependents as $dependent) {
            if (!ModUtil::apiFunc('Modules', 'admin', 'remove', array(
            'id' => $dependent))) {
                return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                        'startnum' => $startnum,
                        'letter' => $letter,
                        'state' => $state)));
            }
        }

        // remove the module blocks
        $blocks = ModUtil::apiFunc('Blocks', 'user', 'getall', array(
                'modid' => $id));
        foreach ($blocks as $block) {
            if (!ModUtil::apiFunc('Blocks', 'admin', 'delete', array(
            'bid' => $block['bid']))) {
                LogUtil::registerError($this->__f('Error! Deleting the block %s .', $block['title']));
                return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                        'startnum' => $startnum,
                        'letter' => $letter,
                        'state' => $state)));
            }
        }

        // Now we've removed dependents and associated blocks remove the main module
        $res = ModUtil::apiFunc('Modules', 'admin', 'remove', array(
                'id' => $id,
                'interactive_remove' => $interactive_remove));
        if (is_bool($res) && $res == true) {
            // Success
            SessionUtil::delVar('modules_id');
            SessionUtil::delVar('modules_startnum');
            SessionUtil::delVar('modules_letter');
            SessionUtil::delVar('modules_state');
            SessionUtil::delVar('interactive_remove');
            LogUtil::registerStatus($this->__('Done! De-installed module.'));
            return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                    'startnum' => $startnum,
                    'letter' => $letter,
                    'state' => $state)));
        } elseif (is_bool($res)) {
            return System::redirect(ModUtil::url('Modules', 'admin', 'view', array(
                    'startnum' => $startnum,
                    'letter' => $letter,
                    'state' => $state)));
        } else {
            return $res;
        }
    }


    /**
     * display available hooks
     * @author Mark West
     * @param int 'id' module id
     * @return string HTML output string
     */
    public function hooks()
    {
        // get our input
        $id = (int) FormUtil::getPassedValue('id', null, 'GET');

        // check the input
        if (!is_numeric($id)) {
            return LogUtil::registerArgsError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // get the modules information
        $modinfo = ModUtil::getInfo($id);
        if ($modinfo == false) {
            return LogUtil::registerError($this->__('Error! No such module ID exists.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }

        if (!SecurityUtil::checkPermission('Modules::', "$modinfo[name]::$id", ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $this->renderer->setCaching(false);

        // assign the modinfo to the template
        $this->renderer->assign('modinfo', $modinfo);

        // add module id to form
        $this->renderer->assign('id', $id);

        $hooks = ModUtil::apiFunc('Modules', 'admin', 'getmoduleshooks', array(
                'modid' => $id));

        $this->renderer->assign('hooks', $hooks);

        // Return the output that has been generated by this function
        return $this->renderer->fetch('modules_admin_hooks.tpl');

    }

    /**
     * display available hooks, extended version
     * @author Mark West
     * @author Frank Schummertz
     * @param int 'id' module id
     * @return string HTML output string
     */
    public function extendedhooks()
    {
        // get our input
        $id = (int) FormUtil::getPassedValue('id', null, 'GET');

        // check the input
        if (!is_numeric($id)) {
            return LogUtil::registerArgsError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // get the modules information
        $modinfo = ModUtil::getInfo($id);
        if ($modinfo == false) {
            return LogUtil::registerError($this->__('Error! No such module ID exists.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }

        if (!SecurityUtil::checkPermission('Modules::', "$modinfo[name]::$id", ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $this->renderer->setCaching(false);

        // assign the modinfo to the template
        $this->renderer->assign('modinfo', $modinfo);

        // add module id to form
        $this->renderer->assign('id', $id);

        $grouped_hooks = ModUtil::apiFunc('Modules', 'admin', 'getextendedmoduleshooks', array(
                'modid' => $id));
        $this->renderer->assign('grouped_hooks', $grouped_hooks);

        // Return the output that has been generated by this function
        return $this->renderer->fetch('modules_admin_extendedhooks.tpl');

    }

    /**
     * This is a standard function to modify the configuration parameters of the
     * module
     * @author Mark West
     * @since 1.14
     * @return string HTML string
     */
    public function modifyconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $this->renderer->setCaching(false);

        // assign all the module vars and return output
        return $this->renderer->assign($this->getVar())
                              ->fetch('modules_admin_modifyconfig.tpl');
    }

    /**
     * This is a standard function to update the configuration parameters of the
     * module given the information passed back by the modification form
     * @author Mark West
     * @since 1.14
     * @return bool true
     */
    public function updateconfig()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // Confirm authorisation code.
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // Update module variables.
        $itemsperpage = (int) FormUtil::getPassedValue('itemsperpage', 25, 'POST');
        if (!is_integer($itemsperpage) || $itemsperpage < 1) {
            LogUtil::registerError($this->__("Warning! The 'Items per page' setting must be a positive integer. The value you entered was corrected."));
            $itemsperpage = (int) $itemsperpage;
            if ($itemsperpage < 1) {
                $itemsperpage = 25;
            }
        }

        $this->setVar('itemsperpage', $itemsperpage);

        // the module configuration has been updated successfuly
        LogUtil::registerStatus($this->__('Done! Saved module configuration.'));

        // Let any other modules know that the modules configuration has been updated
        $this->callHooks('module', 'updateconfig', 'Modules', array('module' => 'Modules'));

        // This function generated no output, and so now it is complete we redirect
        // the user to an appropriate page for them to carry on their work
        return System::redirect(ModUtil::url('Modules', 'admin', 'view'));
    }

    /**
     * Display information of a module compatibility with the version of the core
     * @author Albert Pérez Monfort
     * @param  int 'id' identity of the module
     * @return string HTML output string
     */
    public function compinfo()
    {
        // get our input
        $id = (int) FormUtil::getPassedValue('id', null, 'GET');
        $startnum = (int) FormUtil::getPassedValue('startnum');
        $letter = FormUtil::getPassedValue('letter');
        $state = (int) FormUtil::getPassedValue('state');

        // check the input
        if (!is_numeric($id)) {
            return LogUtil::registerArgsError(ModUtil::url('Modules', 'admin', 'view'));
        }

        // get the modules information from the data base
        $modinfo = ModUtil::getInfo($id);
        if ($modinfo == false) {
            return LogUtil::registerError($this->__('Error! No such module ID exists.'), 404, ModUtil::url('Modules', 'admin', 'view'));
        }

        if (!SecurityUtil::checkPermission('Modules::', "$modinfo[name]::$id", ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        // get the module information from the files system
        $moduleInfo = ModUtil::apiFunc('Modules', 'admin', 'getfilemodules',
                array('name' => $modinfo['name']));

        $this->renderer->setCaching(false);

        // assign the module information and other variables to the template
        $this->renderer->assign('moduleInfo', $moduleInfo)
                       ->assign('id', $id)
                       ->assign('startnum', $startnum)
                       ->assign('letter', $letter)
                       ->assign('state', $state);

        // Return the output that has been generated by this function
        return $this->renderer->fetch('modules_admin_compinfo.tpl');
    }

    /**
     * Lists all plugins.
     * @return string HTML output string
     */
    public function viewPlugins()
    {
        // Security check
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }

        $this->renderer->setCaching(false);

        $state = FormUtil::getPassedValue('state', -1, 'GETPOST');
        $sort = FormUtil::getPassedValue('sort', null, 'GETPOST');
        $module = FormUtil::getPassedValue('bymodule', null, 'GETPOST');
        $systemplugins = FormUtil::getPassedValue('systemplugins', false, 'GETPOST')? true : null;

        $this->renderer->assign('state', $state);

        // generate an auth key to use in urls
        $authid = SecurityUtil::generateAuthKey();
        $plugins = array();
        $pluginClasses = $systemplugins? PluginUtil::loadAllSystemPlugins() : PluginUtil::loadAllModulePlugins();

        foreach ($pluginClasses as $className) {
            $instance = PluginUtil::loadPlugin($className);
            $pluginstate = PluginUtil::getState($instance->getServiceId(), PluginUtil::getDefaultState());

            // state filer
            if ($state >= 0 && $pluginstate['state'] != $state) {
                continue;
            }

            // module filter
            if(!empty($module) && $instance->getModuleName() != $module) {
                continue;
            }

            $actions = array();
            // Translate state
            switch ($pluginstate['state']) {
                case PluginUtil::NOTINSTALLED:
                    $status = $this->__('Not installed');
                    $statusimage = 'redled.gif';

                    $actions[] = array('url' => ModUtil::url('Modules', 'admin', 'initialisePlugin',
                                                    array('plugin' => $className,
                                                          'state'  => $state,
                                                          'bymodule' => $module,
                                                          'sort'   => $sort,
                                                          'systemplugins' => $systemplugins,
                                                          'authid' => $authid)
                                                ),
                                       'image' => 'agt_update_misc.gif',
                                       'title' => $this->__('Install'));
                    break;
                case PluginUtil::ENABLED:
                    $status = $this->__('Active');
                    $statusimage = 'greenled.gif';

                    $actions[] = array('url' => ModUtil::url('Modules', 'admin', 'deactivatePlugin',
                                                    array('plugin' => $className,
                                                          'state'  => $state,
                                                          'bymodule' => $module,
                                                          'sort'   => $sort,
                                                          'systemplugins' => $systemplugins,
                                                          'authid' => $authid)
                                                ),
                                       'image' => 'folder_grey.gif',
                                       'title' => $this->__('Deactivate'));

                    $actions[] = array('url' => ModUtil::url('Modules', 'admin', 'removePlugin',
                                                    array('plugin' => $className,
                                                          'state'  => $state,
                                                          'bymodule' => $module,
                                                          'sort'   => $sort,
                                                          'systemplugins' => $systemplugins,
                                                          'authid' => $authid)
                                                ),
                                       'image' => '14_layer_deletelayer.gif',
                                       'title' => $this->__('Remove plugin'));
                    break;
                case PluginUtil::DISABLED:
                    $status = $this->__('Inactive');
                    $statusimage = 'yellowled.gif';

                    $actions[] = array('url' => ModUtil::url('Modules', 'admin', 'activatePlugin',
                                                    array('plugin' => $className,
                                                          'state'  => $state,
                                                          'bymodule' => $module,
                                                          'sort'   => $sort,
                                                          'systemplugins' => $systemplugins,
                                                          'authid' => $authid)
                                                ),
                                       'image' => 'folder_green.gif',
                                       'title' => $this->__('Activate'));

                    $actions[] = array('url' => ModUtil::url('Modules', 'admin', 'removePlugin',
                                                    array('plugin' => $className,
                                                           'state' => $state,
                                                           'bymodule' => $module,
                                                           'sort'   => $sort,
                                                           'systemplugins' => $systemplugins,
                                                           'authid' => $authid)
                                                ),
                                       'image' => '14_layer_deletelayer.gif',
                                       'title' => $this->__('Remove plugin'));

                    break;
            }

            // upgrade ?
            if ($pluginstate['state'] != PluginUtil::NOTINSTALLED
                && $pluginstate['version'] != $instance->getMetaVersion()) {

                $status = $this->__('New version');
                $statusimage = 'redled.gif';

                $actions = array();
                $actions[] = array('url' => ModUtil::url('Modules', 'admin', 'upgradePlugin',
                                                array('plugin' => $className,
                                                      'state'  => $state,
                                                      'bymodule' => $module,
                                                      'sort'   => $sort,
                                                      'systemplugins' => $systemplugins,
                                                      'authid' => $authid)
                                            ),
                                       'image' => 'agt_update-product.gif',
                                       'title' => $this->__('Upgrade'));

                $actions[] = array('url' => ModUtil::url('Modules', 'admin', 'removePlugin',
                                                array('plugin' => $className,
                                                       'state' => $state,
                                                       'bymodule' => $module,
                                                       'sort'   => $sort,
                                                       'systemplugins' => $systemplugins,
                                                       'authid' => $authid)
                                            ),
                                       'image' => '14_layer_deletelayer.gif',
                                       'title' => $this->__('Remove plugin'));
            }

            $info =  array('instance'    => $instance,
                           'status'      => $status,
                           'statusimage' => $statusimage,
                           'actions'     => $actions,
                           'version'     => $pluginstate['state'] == PluginUtil::NOTINSTALLED ?
                                                 $instance->getMetaVersion() : $pluginstate['version']);

            // new version of plugin?
            if ($pluginstate['state'] != PluginUtil::NOTINSTALLED
                && $pluginstate['version'] != $instance->getMetaVersion()) {
                $info['newversion'] = $instance->getMetaVersion();
            }

            $plugins[] = $info;
        }

        // sort plugins array
        if (!empty($sort)) {
            if ($sort == 'module') {
                usort($plugins, array($this, 'viewPluginsSorter_byModule'));
            } else if ($sort == 'name') {
                usort($plugins, array($this, 'viewPluginsSorter_byName'));
            }
        }

        $this->renderer->assign('plugins', $plugins)
                       ->assign('module', $module)
                       ->assign('sort', $sort)
                       ->assign('state', $state)
                       ->assign('systemplugins', $systemplugins);

        // Return the output that has been generated by this function
        return $this->renderer->fetch('modules_admin_viewPlugins.tpl');
    }

    /**
     * viewPlugins sorter: Sorting by module name
     */
    private function viewPluginsSorter_byModule($a, $b) {
        return strcmp($a['instance']->getModuleName(), $b['instance']->getModuleName());
    }

    /**
     * viewPlugins sorter: Sorting by plugin internal name
     */
    private function viewPluginsSorter_byName($a, $b) {
        return strcmp($a['instance']->getPluginName(), $b['instance']->getPluginName());
    }

    /**
     * Initialise a plugin
     * @return bool true
     */
    public function initialisePlugin()
    {
        // Security and sanity checks
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'viewPlugin'));
        }

        // Get parameters from whatever input we need
        $plugin = FormUtil::getPassedValue('plugin', null);
        $state = FormUtil::getPassedValue('state', -1);
        $sort = FormUtil::getPassedValue('sort', null);
        $module = FormUtil::getPassedValue('bymodule', null);
        $systemplugins = FormUtil::getPassedValue('systemplugins', false)? true : null;

        if (empty($plugin)) {
            return LogUtil::registerError($this->__('Error! No plugin class provided.'), 404, ModUtil::url('Modules', 'admin', 'viewPlugins'));
        }

        PluginUtil::loadAllPlugins();
        if (PluginUtil::install($plugin)) {
            LogUtil::registerStatus($this->__('Done! Installed plugin.'));
        }

        $this->redirect(ModUtil::url('Modules', 'admin', 'viewPlugins', array('state' => $state,
                                                                              'sort'  => $sort,
                                                                              'bymodule' => $module,
                                                                              'systemplugins' => $systemplugins)));
    }

    /**
     * Deactivate a plugin
     * @return bool true
     */
    public function deactivatePlugin()
    {
        // Security and sanity checks
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'viewPlugin'));
        }

        // Get parameters from whatever input we need
        $plugin = FormUtil::getPassedValue('plugin', null);
        $state = FormUtil::getPassedValue('state', -1);
        $sort = FormUtil::getPassedValue('sort', null);
        $module = FormUtil::getPassedValue('bymodule', null);
        $systemplugins = FormUtil::getPassedValue('systemplugins', false)? true : null;

        if (empty($plugin)) {
            return LogUtil::registerError($this->__('Error! No plugin class provided.'), 404, ModUtil::url('Modules', 'admin', 'viewPlugins'));
        }

        PluginUtil::loadAllPlugins();
        if (PluginUtil::disable($plugin)) {
            LogUtil::registerStatus($this->__('Done! Deactivated plugin.'));
        }

        $this->redirect(ModUtil::url('Modules', 'admin', 'viewPlugins', array('state' => $state,
                                                                              'sort'  => $sort,
                                                                              'bymodule' => $module,
                                                                              'systemplugins' => $systemplugins)));
    }

    /**
     * Activate a plugin
     * @return bool true
     */
    public function activatePlugin()
    {
        // Security and sanity checks
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'viewPlugin'));
        }

        // Get parameters from whatever input we need
        $plugin = FormUtil::getPassedValue('plugin', null);
        $state = FormUtil::getPassedValue('state', -1);
        $sort = FormUtil::getPassedValue('sort', null);
        $module = FormUtil::getPassedValue('bymodule', null);
        $systemplugins = FormUtil::getPassedValue('systemplugins', false)? true : null;

        if (empty($plugin)) {
            return LogUtil::registerError($this->__('Error! No plugin class provided.'), 404, ModUtil::url('Modules', 'admin', 'viewPlugins'));
        }

        PluginUtil::loadAllPlugins();
        if (PluginUtil::enable($plugin)) {
            LogUtil::registerStatus($this->__('Done! Activated plugin.'));
        }

        $this->redirect(ModUtil::url('Modules', 'admin', 'viewPlugins', array('state' => $state,
                                                                              'sort'  => $sort,
                                                                              'bymodule' => $module,
                                                                              'systemplugins' => $systemplugins)));
    }

    /**
     * Remove a plugin
     * @return bool true
     */
    public function removePlugin()
    {
        // Security and sanity checks
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'viewPlugin'));
        }

        // Get parameters from whatever input we need
        $plugin = FormUtil::getPassedValue('plugin', null);
        $state = FormUtil::getPassedValue('state', -1);
        $sort = FormUtil::getPassedValue('sort', null);
        $module = FormUtil::getPassedValue('bymodule', null);
        $systemplugins = FormUtil::getPassedValue('systemplugins', false)? true : null;

        if (empty($plugin)) {
            return LogUtil::registerError($this->__('Error! No plugin class provided.'), 404, ModUtil::url('Modules', 'admin', 'viewPlugins'));
        }

        PluginUtil::loadAllPlugins();
        if (PluginUtil::uninstall($plugin)) {
           LogUtil::registerStatus($this->__('Done! De-installed plugin.'));
        }

        $this->redirect(ModUtil::url('Modules', 'admin', 'viewPlugins', array('state' => $state,
                                                                              'sort'  => $sort,
                                                                              'bymodule' => $module,
                                                                              'systemplugins' => $systemplugins)));
    }

    /**
     * Upgrade a plugin
     * @return bool true
     */
    public function upgradePlugin()
    {
        // Security and sanity checks
        if (!SecurityUtil::checkPermission('Modules::', '::', ACCESS_ADMIN)) {
            return LogUtil::registerPermissionError();
        }
        if (!SecurityUtil::confirmAuthKey()) {
            return LogUtil::registerAuthidError(ModUtil::url('Modules', 'admin', 'viewPlugin'));
        }

        // Get parameters from whatever input we need
        $plugin = FormUtil::getPassedValue('plugin', null);
        $state = FormUtil::getPassedValue('state', -1);
        $sort = FormUtil::getPassedValue('sort', null);
        $module = FormUtil::getPassedValue('bymodule', null);
        $systemplugins = FormUtil::getPassedValue('systemplugins', false)? true : null;

        if(empty($plugin)) {
            return LogUtil::registerError($this->__('Error! No plugin class provided.'), 404, ModUtil::url('Modules', 'admin', 'viewPlugins'));
        }

        PluginUtil::loadAllPlugins();
        if (PluginUtil::upgrade($plugin)) {
            LogUtil::registerStatus($this->__('Done! Upgraded plugin.'));
        }

        $this->redirect(ModUtil::url('Modules', 'admin', 'viewPlugins', array('state' => $state,
                                                                              'sort'  => $sort,
                                                                              'bymodule' => $module,
                                                                              'systemplugins' => $systemplugins)));
    }
}