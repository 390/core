<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id$
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_System_Modules
 * @subpackage Users
 */

/**
 * Controllers provide users access to actions that they can perform on the system;
 * this class provides access to (non-administrative) user-initiated actions for the Users module.
 *
 * @package Zikula
 * @subpackage Users
 */
class Users_User extends AbstractController
{
    /**
     * Render and display the user's account panel. If he is not logged in, then redirect to the login screen.
     *
     * @return string The rendered template.
     */
    public function main()
    {
        // Security check
        if (!UserUtil::isLoggedIn()) {
            System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
        } elseif (!SecurityUtil::checkPermission('Users::', '::', ACCESS_READ)) {
            return LogUtil::registerPermissionError();
        }

        // The API function is called.
        $accountlinks = ModUtil::apiFunc('Users', 'user', 'accountLinks');

        if ($accountlinks == false) {
            return LogUtil::registerError($this->__('Error! No results found.'), 404);
        }

        // Create output object
        $renderer = Renderer::getInstance('Users', false, null, true);

        // Assign the items to the template
        $renderer->assign('accountlinks', $accountlinks);

        // Return the output that has been generated by this function
        return $renderer->fetch('users_user_main.htm');
    }

    /**
     * Display the base user form (login/lostpassword/register options).
     *
     * @return string The rendered template.
     */
    public function view()
    {
        // If has logged in, header to index.php
        if (UserUtil::isLoggedIn()) {
            return System::redirect(System::getVar('entrypoint', 'index.php'));
        }

        // create output object
        $renderer = Renderer::getInstance('Users');

        // other vars
        $renderer->assign(ModUtil::getVar('Users'));

        return $renderer->fetch('users_user_view.htm');
    }

    /**
     * Display the login form.
     *
     * Available Get Parameters:
     * - returnpage     (string) The encoded URL of the page to which the user is returned after a successful login.
     * - confirmtou     (int)    Whether the terms and policies need to be reconfirmed or not. 1 = reconfirm, otherwise do not reconfirm.
     * - changepassword (it)     Whether to force a change of password. 1 = force the change, otherwise do not.
     *
     * @param array $args All parameters passed to this function.
     *                    $args['confirmtou']     (int) Used as a default if the 'confirmtou' get parameter is not set.
     *                    $args['changepassword'] (int) Used as a default if the 'changepassword' get parameter is not set.
     *
     * @return string The rendered template.
     */
    public function loginScreen($args)
    {
        // create output object
        $renderer = Renderer::getInstance('Users');

        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        $returnurl = FormUtil::getPassedValue('returnpage', null, 'GET');
        $confirmtou = (int)FormUtil::getPassedValue('confirmtou', isset($args['confirmtou']) ? $args['confirmtou'] : 0, 'GET');
        $changepassword = (int)FormUtil::getPassedValue('changepassword', isset($args['changepassword']) ? $args['changepassword'] : 0, 'GET');

        $passwordtext = ($changepassword == 1) ? $this->__('Current password') : $this->__('Password');

        // assign variables for the template
        $renderer->assign('loginviaoption', ModUtil::getVar('Users', 'loginviaoption'));
        $renderer->assign('seclevel', System::getVar('seclevel'));
        $renderer->assign('allowregistration', ModUtil::getVar('Users', 'reg_allowreg'));
        $renderer->assign('returnurl', $returnurl);
        // do we have to show a note about reconfirming the terms of use?
        if (ModUtil::available('legal') && (ModUtil::getVar('legal', 'termsofuse') || ModUtil::getVar('legal', 'privacypolicy'))) {
            $renderer->assign('tou_active', ModUtil::getVar('legal', 'termsofuse', true));
            $renderer->assign('pp_active',  ModUtil::getVar('legal', 'privacypolicy', true));
        } else {
            $confirmtou = 0;
        }

        // do we have to force the change of password?
        $renderer->assign('changepassword', $changepassword);
        $renderer->assign('confirmtou', $confirmtou);
        $renderer->assign('passwordtext', $passwordtext);
        $renderer->assign('use_password_strength_meter', ModUtil::getVar('Users', 'use_password_strength_meter'));

        return $renderer->fetch('users_user_loginscreen.htm');
    }

    /**
     * Set an underage error message and route the user back to the first user page.
     *
     * @return bool True, and the user is redirected to the view function.
     */
    public function underAge()
    {
        LogUtil::registerError($this->_f('Sorry! You must be %s or over to register for a user account here.', ModUtil::getVar('Users', 'minage')));
        return System::redirect(ModUtil::url('Users', 'user', 'view'));
    }

    /**
     * Display the registration form.
     *
     * @return string The rendered template.
     */
    public function register()
    {
        // If has logged in, header to index.php
        if (UserUtil::isLoggedIn()) {
            return System::redirect(System::getVar('entrypoint', 'index.php'));
        }

        $template = 'users_user_register.htm';
        // check if we've agreed to the age limit
        if (ModUtil::getVar('Users', 'minage') != 0 && !stristr(System::serverGetVar('HTTP_REFERER'), 'register')) {
            $template = 'users_user_checkage.htm';
        }

        // create output object
        $renderer = Renderer::getInstance('Users', false);

        // other vars
        $modvars = ModUtil::getVar('Users');

        $renderer->assign($modvars);
        $renderer->assign('sitename', System::getVar('sitename'));
        $renderer->assign('legal',    ModUtil::available('legal'));
        $renderer->assign('tou_active', ModUtil::getVar('legal', 'termsofuse', true));
        $renderer->assign('pp_active',  ModUtil::getVar('legal', 'privacypolicy', true));

        return $renderer->fetch($template);
    }

    /**
     * Display the lost user name / password choices.
     *
     * @return string The rendered template.
     */
    public function lostPwdUname()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        // create output object
        $renderer = Renderer::getInstance('Users');
        return $renderer->fetch('users_user_lostpwduname.htm');
    }

    /**
     * Display the lost user name form.
     *
     * @return string The rendered template.
     */
    public function lostUname()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        // create output object
        $renderer = Renderer::getInstance('Users');
        return $renderer->fetch('users_user_lostuname.htm');
    }

    /**
     * Send the user a lost uname.
     *
     * Available Post Parameters:
     * - email (string) The user's e-mail address.
     * - code  (string) The confirmation code.
     *
     * @return bool True if successful request or expected error, false if unexpected error.
     */
    public function mailUname()
    {
        $emailMessageSent = false;

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'lostUname'));
        }

        $email = FormUtil::getPassedValue('email', null, 'POST');

        SessionUtil::requireSession();
        SessionUtil::delVar('lostuname_email');

        if (empty($email)) {
            LogUtil::registerError($this->__('Error! E-mail address field is empty.'));
        } else {
            // save username and password for redisplay
            SessionUtil::setVar('lostuname_email', $email);

            $emailMessageSent = ModUtil::apiFunc('Users', 'user', 'mailUname', array(
                'idfield' => 'email',
                'id' => $email
                ));
        }

        if ($emailMessageSent) {
            SessionUtil::delVar('lostuname_email');
            LogUtil::registerStatus($this->_f('Done! The user name for %s has been sent via e-mail.', $email));
            return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
        } else {
            return System::redirect(ModUtil::url('Users', 'user', 'lostUname'));
        }
    }

    /**
     * Display the lost password form.
     *
     * @return string The rendered template.
     */
    public function lostPassword()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        // create output object
        $renderer = Renderer::getInstance('Users');
        return $renderer->fetch('users_user_lostpassword.htm');
    }

    /**
     * Send the user a confirmation code in order to reset a lost password.
     *
     * Available Post Parameters:
     * - uname (string) The user's user name.
     * - email (string) The user's e-mail address.
     * - code  (string) The confirmation code.
     *
     * @return bool True if successful request or expected error, false if unexpected error.
     */
    public function mailConfirmationCode()
    {
        $emailMessageSent = false;

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'lostPassword'));
        }

        $uname = FormUtil::getPassedValue('uname', null, 'POST');
        $email = FormUtil::getPassedValue('email', null, 'POST');

        SessionUtil::requireSession();
        SessionUtil::delVar('lostpassword_uname');
        SessionUtil::delVar('lostpassword_email');

        if (empty($uname) && empty($email)) {
            LogUtil::registerError($this->__('Error! User name and e-mail address fields are empty.'));
        } elseif (!empty($email) && !empty($uname)) {
            LogUtil::registerError($this->__('Error! Please enter either a user name OR an e-mail address, but not both of them.'));
        } else {
            if (!empty($uname)) {
                $idfield = 'uname';
                $idvalue = $uname;
                // save username for redisplay
                SessionUtil::setVar('lostpassword_uname', $uname);
            } else {
                $idfield = 'email';
                $idvalue = $email;
                // save email for redisplay
                SessionUtil::setVar('lostpassword_email', $email);
            }
            $emailMessageSent = ModUtil::apiFunc('Users', 'user', 'mailConfirmationCode', array(
                'idfield' => $idfield,
                'id' => $idvalue
                ));
        }

        // save username and password for redisplay
        SessionUtil::setVar('lostpassword_email', $email);

        if ($emailMessageSent) {
            LogUtil::registerStatus($this->_f('Done! The confirmation code for %s has been sent via e-mail.', $idvalue));
            return System::redirect(ModUtil::url('Users', 'user', 'lostPasswordCode'));
        } else {
            return System::redirect(ModUtil::url('Users', 'user', 'lostPassword'));
        }
    }

    /**
     * Display the lost password confirmation code entry form.
     *
     * @return string The rendered template.
     */
    public function lostPasswordCode()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        $uname = FormUtil::getPassedValue('uname', null, 'GET');
        $email = FormUtil::getPassedValue('email', null, 'GET');
        $code  = FormUtil::getPassedValue('code',  null, 'GET');

        if (!isset($uname)) {
            $uname = SessionUtil::getVar('lostpassword_uname', null);
        }
        if (!isset($email) && (!isset($uname) || empty($uname))) {
            $email = SessionUtil::getVar('lostpassword_email', null);
        }
        if (!isset($code)) {
            $code = SessionUtil::getVar('lostpassword_code', null);
        }

        // create output object
        $renderer = Renderer::getInstance('Users');
        $renderer->assign('lostpassword_uname', $uname);
        $renderer->assign('lostpassword_email', $email);
        $renderer->assign('lostpassword_code', $code);
        return $renderer->fetch('users_user_lostpasswordcode.htm');
    }

    /**
     * Show the user his password reminder.
     *
     * Available Post Parameters:
     * - uname (string) The user's user name.
     * - email (string) The user's e-mail address.
     * - code  (string) The confirmation code.
     *
     * @return bool True if successful request or expected error, false if unexpected error.
     */
    public function passwordReminder()
    {
        $emailMessageSent = false;

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'lostPasswordCode'));
        }

        $uname = FormUtil::getPassedValue('uname', null, 'GETPOST');
        $email = FormUtil::getPassedValue('email', null, 'GETPOST');
        $code  = FormUtil::getPassedValue('code',  null, 'GETPOST');

        SessionUtil::requireSession();
        SessionUtil::delVar('lostpassword_uname');
        SessionUtil::delVar('lostpassword_email');
        SessionUtil::delVar('lostpassword_code');

        if (empty($uname) && empty($email)) {
            LogUtil::registerError($this->__('Error! User name and e-mail address fields are empty.'));
        } elseif (!empty($email) && !empty($uname)) {
            LogUtil::registerError($this->__('Error! Please enter either a user name OR an e-mail address, but not both of them.'));
        } else {
            if (!empty($uname)) {
                $idfield = 'uname';
                $idvalue = $uname;
                // save username for redisplay
                SessionUtil::setVar('lostpassword_uname', $uname);
            } else {
                $idfield = 'email';
                $idvalue = $email;
                // save email for redisplay
                SessionUtil::setVar('lostpassword_email', $email);
            }

            if (ModUtil::apiFunc('Users', 'user', 'checkConfirmationCode', array(
                    'idfield' => $idfield,
                    'id' => $idvalue,
                    'code' => $code,
                )))
            {
                $userInfo = UserUtil::getVars($idvalue, true, $idfield);
                $passwordReminder = $userInfo['__ATTRIBUTES__']['password_reminder'];
            } else {
                LogUtil::registerError($this->__("Error! The code that you've enter is invalid."));
            }
        }

        if (!isset($userInfo)) {
            // $userInfo is not set, so there was an error prior to an attempt to get the user.

            // save username and password for redisplay
            SessionUtil::setVar('lostpassword_uname', $uname);
            SessionUtil::setVar('lostpassword_email', $email);
            SessionUtil::setVar('lostpassword_code',  $code);

            return System::redirect(ModUtil::url('Users', 'user', 'lostPasswordCode'));
        } elseif (isset($userInfo) && !$userInfo) {
            // $userInfo is set, but false. There was a database error retrieving the user.
            return System::redirect(ModUtil::url('Users', 'user', 'lostPassword'));
        } elseif (empty($passwordReminder)) {
            // $userInfo is set, and not false, but $passwordReminder is empty. Got the user, but no reminder.
            $mailpasswordArgs = array();
            if (!empty($uname)) {
                $mailpasswordArgs['uname'] = $uname;
            }
            if (!empty($email)) {
                $mailpasswordArgs['email'] = $email;
            }
            $mailpasswordArgs['code'] = $code;
            $mailpasswordArgs['authid'] = SecurityUtil::generateAuthKey('Users');

            return System::redirect(ModUtil::url('Users', 'user', 'mailPassword', $mailpasswordArgs));
        } else {
            // $userInfo is set, and not false, and $passwordReminder is available. Show it.
            $renderer = Renderer::getInstance('Users');
            $renderer->assign('lostpassword_uname', $userInfo['uname']);
            $renderer->assign('password_reminder', $passwordReminder);
            $renderer->assign('lostpassword_code', $code);
            return $renderer->fetch('users_user_passwordreminder.htm');
        }
    }

    /**
     * Send the user a lost password.
     *
     * Available Post Parameters:
     * - uname (string) The user's user name.
     * - email (string) The user's e-mail address.
     * - code  (string) The confirmation code.
     *
     * @return bool True if successful request or expected error, false if unexpected error.
     */
    public function mailPassword($args = array())
    {
        $emailMessageSent = false;

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'lostPasswordCode'));
        }

        $uname = FormUtil::getPassedValue('uname', null, 'GETPOST');
        $email = FormUtil::getPassedValue('email', null, 'GETPOST');
        $code  = FormUtil::getPassedValue('code',  null, 'GETPOST');

        SessionUtil::requireSession();
        SessionUtil::delVar('lostpassword_uname');
        SessionUtil::delVar('lostpassword_email');
        SessionUtil::delVar('lostpassword_code');

        if (empty($uname) && empty($email)) {
            LogUtil::registerError($this->__('Error! User name and e-mail address fields are empty.'));
        } elseif (!empty($email) && !empty($uname)) {
            LogUtil::registerError($this->__('Error! Please enter either a user name OR an e-mail address, but not both of them.'));
        } else {
            if (!empty($uname)) {
                $idfield = 'uname';
                $idvalue = $uname;
                // save username for redisplay
                SessionUtil::setVar('lostpassword_uname', $uname);
            } else {
                $idfield = 'email';
                $idvalue = $email;
                // save email for redisplay
                SessionUtil::setVar('lostpassword_email', $email);
            }

            if (ModUtil::apiFunc('Users', 'user', 'checkConfirmationCode', array(
                    'idfield' => $idfield,
                    'id' => $idvalue,
                    'code' => $code,
                )))
            {
                $emailMessageSent = ModUtil::apiFunc('Users', 'user', 'mailPassword', array(
                    'idfield' => $idfield,
                    'id'      => $idvalue,
                    'code'    => $code
                    ));
            } else {
                LogUtil::registerError($this->__("Error! The code that you've enter is invalid."));
            }
        }

        if ($emailMessageSent) {
            LogUtil::registerStatus($this->_f('Done! Password for %s has been sent via e-mail.', $who));
            return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
        } else {
            // save username and password for redisplay
            SessionUtil::setVar('lostpassword_uname', $uname);
            SessionUtil::setVar('lostpassword_email', $email);
            SessionUtil::setVar('lostpassword_code',  $code);

            return System::redirect(ModUtil::url('Users', 'user', 'lostPasswordCode'));
        }
    }

    /**
     * Login a user.
     *
     * If the user is already logged in, then he is redirected to the main user function.
     * If a redirect URL is specified, then the user is redirected to that page upon
     * successful login.
     *
     * NOTE TO DEVELOPERS: Do not assume that the Users module will be the module that authenticates the
     * user name (or email or whatever) and password! This function must rely on UserUtil and its
     * dispatching of authentication to the proper authmodule!
     *
     * @return bool True on successful login, otherwise false.
     */
    public function login()
    {
        // we shouldn't get here if logged in already....
        if (UserUtil::isLoggedIn()) {
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users','user','loginScreen'));
        }

        $uname      = FormUtil::getPassedValue ('uname');
        $email      = FormUtil::getPassedValue ('email');
        $pass       = FormUtil::getPassedValue ('pass');
        $url        = FormUtil::getPassedValue ('url');
        $rememberme = FormUtil::getPassedValue ('rememberme', '');
        $passwordReminder = FormUtil::getPassedValue ('password_reminder', '');

        // TODO - What if the user is using an identifier from an alternate authenticating module (e.g. OpenID or Facebook)? This forces the zikula uname and that uname to be required to match!
        $userid = UserUtil::getIdFromName($uname);

        $userstatus = UserUtil::getVar('activated', $userid);
        $tryagain = false;

        // TODO - There appears to be something about confirmtou and pp in UserUtil::login. Is this and that a duplication?
        $confirmtou = 0;
        $changepassword = 0;
        if (($userstatus == 2 || $userstatus == 6) && ModUtil::available('legal') && (ModUtil::getVar('legal', 'termsofuse', true) || ModUtil::getVar('legal', 'privacypolicy', true))) {
            $confirmtou = 1;
            $touaccepted = (int)FormUtil::getPassedValue('touaccepted', 0, 'GETPOST');
            if ($touaccepted<>1) {
                // user had to accept the terms of use, but didn't
                $tryagain = true;
            }
        }

        // TODO - This forces authentication against the Users module authapi! What if the user is trying to log in with an OpenID or something else?
        // the current password must be valid
        $current_pass = UserUtil::getVar('pass', $userid);
        $hash_number = UserUtil::getVar('hash_method', $userid);
        $hashmethodsarray   = ModUtil::apiFunc('Users', 'user', 'getHashMethods', array('reverse' => true));
        $passhash = hash($hashmethodsarray[$hash_number], $pass);
        if ($passhash != $current_pass) {
            $errormsg = $this->__('Sorry! The current password you entered is not correct. Please correct your entry and try again.');
            $tryagain = true;
        }

        // TODO - A forced change of password only makes sense if the Users module is the authenticating module. Change this so that a forced Zikula password change is independent of the authmodule.
        if ($userstatus == 4 || $userstatus == 6) {
            $changepassword = 1;
            $validnewpass = true;
            $newpass = FormUtil::getPassedValue('newpass', null, 'POST');
            $confirmnewpass = FormUtil::getPassedValue('confirmnewpass', null, 'POST');
            // checks if the new password is valid
            // the new password must be different of the current password
            if ($pass == $newpass && $validnewpass) {
                $errormsg = $this->__('Sorry! The new and the current passwords must be different. Please correct your entries and try again.');
                $validnewpass = false;
            }

            // check if the new password satisfy the requirements
            $minpass = ModUtil::getVar('Users', 'minpass');
            if (!empty($newpass) && strlen($newpass) < $minpass && $validnewpass) {
                $errormsg = $this->_fn('Your password must be at least %s character long.', 'Your password must be at least %s characters long.', $minpass, $minpass);
                $validnewpass = false;
            }

            // checks if the new password and the repeated new password are the same
            if (($newpass != $confirmnewpass) && $validnewpass) {
                $errormsg = $this->__('Sorry! The two passwords you entered do not match. Please correct your entries and try again.');
                $validnewpass = false;
            }

            // checks if the new password and the repeated new password are the same
            if (empty($newpass)) {
                $validnewpass = false;
            }

            // checks if the new password and the repeated new password are the same
            if (empty($passwordReminder) && $validnewpass) {
                $errormsg = $this->__('Sorry! You must provide a new password reminder word or phrase.');
                $validnewpass = false;
            }

            if (!$validnewpass) {
                // user password change is incorrect
                $tryagain = true;
            }
        }

        if ($tryagain) {
            // user had to accept the terms of use, but didn't
            if ($errormsg == '') {
                $errormsg = $this->__('Error! Log-in was not completed. Please read the information below.');
            }
            return LogUtil::registerError($errormsg , 403, ModUtil::url('Users','user','loginScreen',
                                                                    array('confirmtou' => $confirmtou,
                                                                          'changepassword' => $changepassword,
                                                                          'returnpage' => $url)));
        } else {
            if ($userstatus == 4 || $userstatus == 6) {
                // change the user's password
                $hash_number = UserUtil::getVar('hash_method', $userid);
                $hashmethodsarray   = ModUtil::apiFunc('Users', 'user', 'getHashMethods', array('reverse' => true));
                $newpasshash = hash($hashmethodsarray[$hash_number], $newpass);
                UserUtil::setVar('pass', $newpasshash, $userid);
                UserUtil::setVar('password_reminder', $passwordReminder, $userid);
                $pass = $newpass;
            }
            UserUtil::setVar('activated', UserUtil::ACTIVATED_ACTIVE, $userid);
        }

        $loginoption    = ModUtil::getVar('Users', 'loginviaoption');
        $login_redirect = ModUtil::getVar('Users', 'login_redirect');

        if (UserUtil::login((($loginoption==1) ? $email : $uname), $pass, $rememberme)) {
            // start login hook
            $uid = UserUtil::getVar('uid');
            ModUtil::callHooks('zikula', 'login', $uid, array('module' => 'zikula'));
            if ($login_redirect == 1) {
                // WCAG compliant login
                return System::redirect($url);
            } else {
                // meta refresh
                $this->printRedirectPage($this->__('You are being logged-in. Please wait...'), $url);
            }
            return true;
        } else {
            LogUtil::registerError($this->__('Sorry! Unrecognised user name or password. Please try again.'));
            $reg_verifyemail = ModUtil::getVar('Users', 'reg_verifyemail');
            if ($reg_verifyemail == 2) {
                LogUtil::registerError($this->__('Notice: If you have just registered a new account then please check your e-mail and activate your account before trying to log in.'));
            }
            return System::redirect(ModUtil::url('Users','user','loginScreen', array('returnpage' => urlencode($url))));
        }
    }

    /**
     * Log a user out.
     *
     * The user is redirected to the entry point of the site, or to a redirect
     * page if specified in the site configuration.
     *
     * @return bool True (whether successfully logged out or not.)
     */
    public function logout()
    {
        $login_redirect = ModUtil::getVar('Users', 'login_redirect');

        // start logout hook
        $uid = UserUtil::getVar('uid');
        ModUtil::callHooks('zikula', 'logout', $uid, array('module' => 'zikula'));
        if (UserUtil::logout()) {
            if ($login_redirect == 1) {
                // WCAG compliant logout - we redirect to index.php because
                // we might no have the permission for the recent site any longer
                return System::redirect(System::getVar('entrypoint', 'index.php'));
            } else {
                // meta refresh
                $this->printRedirectPage($this->__('Done! You have been logged out.'));
            }
        } else {
            LogUtil::registerError($this->__('Error! You have not been logged out.'));
            return System::redirect(System::getVar('entrypoint', 'index.php'));
        }

        return true;
    }

    /**
     * Complete the process of creating a new user or new user registration from a registration request form.
     *
     * Available Post Parameters:
     * - uname         (string) The user name to store on the new user record.
     * - agreetoterms  (int)    Whether the user has agreed to the terms and policies or not.
     * - email         (string) The e-mail address to store on the new user record.
     * - pass          (string) The new password to store on the new user record.
     * - vpass         (string) A verification of the new password to store on the new user record.
     * - user_viewmail (mixed)  Not Used.
     * - reg_answer    (string) The user-entered answer to the configured registration anti-spam question.
     *
     * @return string|bool If registration is moderated, then the string rendering of a template, otherwise true on successful
     *                     registration; false on error.
     */
    public function finishNewUser()
    {
        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users','user','register'));
        }

        $uname          = FormUtil::getPassedValue ('uname', null, 'POST');
        $agreetoterms   = FormUtil::getPassedValue ('agreetoterms', null, 'POST');
        $email          = FormUtil::getPassedValue ('email', null, 'POST');
        $vemail         = FormUtil::getPassedValue ('vemail', null, 'POST');
        $pass           = FormUtil::getPassedValue ('pass', null, 'POST');
        $vpass          = FormUtil::getPassedValue ('vpass', null, 'POST');
        // TODO - user_viewmail is not used anywhere in the function. Is it an old legacy field, or does it need to be processed?
        $user_viewemail = FormUtil::getPassedValue ('user_viewmail', null, 'POST');
        $reg_answer     = FormUtil::getPassedValue ('reg_answer', null, 'POST');
        $passwordReminder = FormUtil::getPassedValue ('password_reminder', null, 'POST');

        if (ModUtil::getVar('Users', 'lowercaseuname', false)) {
            $uname = strtolower($uname);
        }

        // some defaults for error detection and redirection
        $msgtype = 'error';
        $redirectfunc = 'loginscreen';

        // Verify dynamic user data
        if (ModUtil::getVar('Users', 'reg_optitems') == 1) {
            $profileModule = System::getVar('profilemodule', '');
            if (!empty($profileModule) && ModUtil::available($profileModule)) {

                // any Profile module needs this function
                $checkrequired = ModUtil::apiFunc($profileModule, 'user', 'checkRequired');

                if ($checkrequired) {
                    // ! %s is a comma separated list of fields that were left blank
                    $message = $this->_f('Error! One or more required fields were left blank or incomplete (%s).', $checkrequired['translatedFieldsStr']);

                    return LogUtil::registerError($message, null, ModUtil::url('Users', 'user', 'register'));
                }
            }
        }

        // because index.php use $name var $name can not get correct value. [class007]
        $name         = $uname;
        $commentlimit = (int)ModUtil::getVar('Users', 'commentlimit', 0);
        $storynum     = (int)ModUtil::getVar('Users', 'storyhome', 10);
        $minpass      = (int)ModUtil::getVar('Users', 'minpass', 5);
        $user_regdate = DateUtil::getDatetime();

        // TODO: add require check for dynamics.
        $checkuser = ModUtil::apiFunc('Users', 'user', 'checkUser',
                                  array('uname'        => $uname,
                                        'email'        => $email,
                                        'agreetoterms' => $agreetoterms));

        // if errorcode != 1 then return error msgs
        if ($checkuser != 1) {
            switch ($checkuser)
            {
                case -1:
                    $message = $this->__('Sorry! You have not been granted access to this module.');
                    break;
                case 2:
                    $message =  $this->__('Sorry! The e-mail address you entered was incorrectly formatted or is unacceptable for other reasons. Please correct your entry and try again.');
                    break;
                case 3:
                    $message =  $this->__('Error! Please click on the checkbox to accept the site\'s \'Terms of use\' and \'Privacy policy\'.');
                    break;
                case 4:
                    $message =  $this->__('Sorry! The user name you entered is not acceptable. Please correct your entry and try again.');
                    break;
                case 5:
                    $message =  $this->__('Sorry! The user name you entered is too long. The maximum length is 25 characters.');
                    break;
                case 6:
                    $message =  $this->__('Sorry! The user name you entered is reserved and cannot be registered. Please choose another name and try again.');
                    break;
                case 7:
                    $message =  $this->__('Sorry! Your user name cannot contain spaces. Please correct your entry and try again.');
                    break;
                case 8:
                    $message =  $this->__('Sorry! This user name has already been registered. Please choose another name and try again.');
                    break;
                case 9:
                    $message =  $this->__('Sorry! This e-mail address has already been registered, and it cannot be used again for creating another account.');
                    break;
                case 11:
                    $message =  $this->__('Sorry! Your user agent is not accepted for registering an account on this site.');
                    break;
                case 12:
                    $message =  $this->__('Sorry! E-mail addresses from the domain you entered are not accepted for registering an account on this site.');
                    break;
                default:
                    $message =  $this->__('Sorry! You have not been granted access to this module.');
            } // switch

            return LogUtil::registerError($message, null, ModUtil::url('Users', 'user', 'register'));
        }

        if ($email !== $vemail) {
            $message = $this->__('Sorry! You did not enter the same e-mail address in each box. Please correct your entry and try again.');
        }

        $modvars = ModUtil::getVar('Users');

        if (!$modvars['reg_verifyemail'] || $modvars['reg_verifyemail'] == 2) {
            if ((isset($pass)) && ("$pass" != "$vpass")) {
                $message = $this->__('Error! You did not enter the same password in each password field. '
                    . 'Please enter the same password once in each password field (this is required for verification).');

            } elseif (isset($pass) && (strlen($pass) < $minpass)) {
                $message =  $this->_fn('Your password must be at least %s character long', 'Your password must be at least %s characters long', $minpass);

            } elseif (empty($pass) && !ModUtil::getVar('Users', 'reg_verifyemail')) {
                $message =  $this->__('Error! Please enter a password.');
            }
        }

        if ($modvars['reg_question'] != '' && $modvars['reg_answer'] != '') {
            if ($reg_answer != $modvars['reg_answer']) {
                $message = $this->__('Sorry! You gave the wrong answer to the anti-spam registration question. Please correct your entry and try again.');
            }
        }

        if (isset($message)) {
            return LogUtil::registerError($message, null, ModUtil::url('Users', 'user', 'register'));
        }

        // TODO: Clean up
        $registered = ModUtil::apiFunc('Users', 'user', 'finishNewUser',
                                   array('uname'                => $uname,
                                         'pass'                 => $pass,
                                         'password_reminder'    => $passwordReminder,
                                         'email'                => $email,
                                         'user_regdate'         => $user_regdate,
                                         'storynum'             => $storynum,
                                         'commentlimit'         => $commentlimit));

        if (!$registered) {
            LogUtil::registerError($this->__('Error! The registration process failed. Please contact the site administrator.'));
        } else {
            if ((int)ModUtil::getVar('Users', 'moderation') == 1) {
                LogUtil::registerStatus($this->__('Done! Thanks for registering! Your application has been submitted for approval.'));
                $renderer = Renderer::getInstance('Users');
                return $renderer->fetch('users_user_registrationfinished.htm');
            } else {
                LogUtil::registerStatus($this->__('Done! You are now a registered user. You should receive your user '
                    . 'account details (including your password) at the e-mail address you entered.'));
                if (ModUtil::getVar('Users', 'reg_verifyemail') == 2) {
                    LogUtil::registerStatus($this->__('Please use the link in the e-mail message to activate your account.'));
                }
                return System::redirect(ModUtil::url('Users', 'user', $redirectfunc));
            }
        }

        return System::redirect(System::getHomepageUrl());
    }

    /**
     * Activate a user account.
     *
     * Available Get/Post Parameters;
     * - code (string) Confirmation/Activation code.
     *
     * @param array $args All parameters passed to this function.
     *                    $args['code'] (string) Used as a default if the get/post parameter 'code' is not set.
     *
     * @return bool True on success, otherwise false.
     */
    public function activation($args)
    {
        $code = base64_decode(FormUtil::getPassedValue('code', (isset($args['code']) ? $args['code'] : null), 'GETPOST'));
        $code = explode('#', $code);

        if (!isset($code[0]) || !isset($code[1])) {
            return LogUtil::registerError($this->__('Error! Could not activate your account. Please contact the site administrator.'));
        }
        $uid = $code[0];
        $code = $code[1];

        // Get user Regdate
        $regdate = UserUtil::getVar('user_regdate', $uid);

        // Checking length in case the date has been stripped from its space in the mail.
        if (strlen($code) == 18) {
            if (!strpos($code, ' ')) {
                $code = substr($code, 0, 10) . ' ' . substr($code, -8);
            }
        }

        if (hash('md5', $regdate) == hash('md5', $code)) {
            $returncode = ModUtil::apiFunc('Users', 'user', 'activateUser',
                                       array('uid'     => $uid,
                                             'regdate' => $regdate));

            if (!$returncode) {
                return LogUtil::registerError($this->__('Error! Could not activate your account. Please contact the site administrator.'));
            }
            LogUtil::registerStatus($this->__('Done! Account activated.'));
            return System::redirect(ModUtil::url('Users', 'user', 'loginScreen'));
        } else {
            return LogUtil::registerError($this->__('Sorry! You entered an invalid confirmation code. Please correct your entry and try again.'));
        }
    }

    /**
     * Print a PostNuke-style login/logout redirect page. Internal use only, not intended to be called through the API.
     *
     * @param string $message The message to display on the redirect page.
     * @param string $url     The URL of the page to redirect to after this redirect page has been displayed.
     *
     * @access private
     *
     * @return bool True.
     */
    private function printRedirectPage($message, $url)
    {
        $renderer = Renderer::getInstance('Users');
        $url = (!isset($url) || empty($url)) ? System::getVar('entrypoint', 'index.php') : $url;

        // check the url
        if (substr($url, 0, 1) == '/') {
            // Root-relative links
            $url = 'http'.(System::serverGetVar('HTTPS')=='on' ? 's' : '').'://'.System::serverGetVar('HTTP_HOST').$url;
        } elseif (!preg_match('!^(?:http|https):\/\/!', $url)) {
            // Removing leading slashes from redirect url
            $url = preg_replace('!^/*!', '', $url);
            // Get base URL and append it to our redirect url
            $baseurl = System::getBaseUrl();
            $url = $baseurl.$url;
        }

        $renderer->assign('ThemeSel', System::getVar('Default_Theme'));
        $renderer->assign('url', $url);
        $renderer->assign('message', $message);
        $renderer->assign('stylesheet', ThemeUtil::getModuleStylesheet('Users'));
        $renderer->assign('redirectmessage', $this->__('If you are not automatically re-directed then please click here.'));
        $renderer->display('users_user_redirectpage.htm');
        return true;
    }

    /**
     * Log into a site that is currently "off" (normal logins are not allowed).
     *
     * Allows the administrator to access the site during maintenance.
     *
     * Available Post Parameters:
     * - user       (string) The user name of the user attempting to log in.
     * - pass       (string) The password of the user attempting to log in.
     * - rememberme (int)    Whether the login session should persist.
     *
     * @return bool True.
     */
    public function siteOffLogin()
    {
        // do not process if the site is enabled
        if (!System::getVar('siteoff', false)) {
            $path = dirname(System::serverGetVar('PHP_SELF'));
            $path = str_replace('\\', '/', $path);
            return System::redirect($path . '/' . System::getVar('entrypoint', 'index.php'));
        }

        $user = FormUtil::getPassedValue('user', null, 'POST');
        $pass = FormUtil::getPassedValue('pass', null, 'POST');
        $rememberme = FormUtil::getPassedValue('rememberme', false, 'POST');

        UserUtil::login($user, $pass, $rememberme);

        if (!SecurityUtil::checkPermission('Settings::', 'SiteOff::', ACCESS_ADMIN)) {
            UserUtil::logout();
        }

        $path = dirname(System::serverGetVar('PHP_SELF'));
        $path = str_replace('\\', '/', $path);
        return System::redirect($path . '/' . System::getVar('entrypoint', 'index.php'));
    }

    /**
     * Display the configuration options for the users block.
     *
     * @return string The rendered template.
     */
    public function usersBlock()
    {
        $blocks = ModUtil::apiFunc('Blocks', 'user', 'getall');
        $mid = ModUtil::getIdFromName('Users');
        $found = false;
        foreach ($blocks as $block) {
            if ($block['mid'] == $mid && $block['bkey'] == 'user') {
                $found = true;
                break;
            }
        }

        if (!$found) {
            return LogUtil::registerPermissionError();
        }

        $renderer = Renderer::getInstance('Users');
        $renderer->assign(UserUtil::getVars(UserUtil::getVar('uid')));
        return $renderer->fetch('users_user_usersblock.htm');
    }

    /**
     * Update the custom users block.
     *
     * Available Post Parameters:
     * - ublockon (int)   Whether the block is displayed or not.
     * - ublock   (mixed) ?.
     *
     * @return bool True on success, otherwise false.
     */
    public function updateUsersBlock()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        $blocks = ModUtil::apiFunc('Blocks', 'user', 'getall');
        $mid = ModUtil::getIdFromName('Users');
        $found = false;
        foreach ($blocks as $block) {
            if ($block['mid'] == $mid && $block['bkey'] == 'user') {
                $found = true;
                break;
            }
        }

        if (!$found) {
            return LogUtil::registerPermissionError();
        }

        $uid = UserUtil::getVar('uid');
        $ublockon = (bool)FormUtil::getPassedValue('ublockon', false, 'POST');
        $ublock = (string)FormUtil::getPassedValue('ublock', '', 'POST');

        UserUtil::setVar('ublockon', $ublockon);
        UserUtil::setVar('ublock', $ublock);

        LogUtil::registerStatus($this->__('Done! Saved custom block.'));
        return System::redirect(ModUtil::url('Users'));
    }

    /**
     * Display the change password form.
     *
     * @return string The rendered template.
     */
    public function changePassword()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        $changepassword = ModUtil::getVar('Users', 'changepassword', 1);
        if ($changepassword <> 1) {
            return System::redirect('Users', 'user', 'main');
        }

        // Create output object
        $renderer = Renderer::getInstance('Users', false, null, true);

        // assign vars
        $renderer->assign('use_password_strength_meter', ModUtil::getVar('Users', 'use_password_strength_meter'));

        // Return the output that has been generated by this function
        return $renderer->fetch('users_user_changepassword.htm');
    }

    /**
     * Update the user's password.
     *
     * Available Post Parameters:
     * - oldpassword        (string) The original password.
     * - newpassword        (string) The new password to be stored for the user.
     * - newpasswordconfirm (string) Verification of the new password to be stored for the user.
     *
     * @return bool True on success, otherwise false.
     */
    public function updatePassword()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'changePassword'));
        }

        $uservars = ModUtil::getVar('Users');
        if ($uservars['changepassword'] <> 1) {
            return System::redirect('Users', 'user', 'main');
        }

        $oldpassword        = FormUtil::getPassedValue('oldpassword', '', 'POST');
        $newpassword        = FormUtil::getPassedValue('newpassword', '', 'POST');
        $newpasswordconfirm = FormUtil::getPassedValue('newpasswordconfirm', '', 'POST');
        $passwordReminder   = FormUtil::getPassedValue('password_reminder', '', 'POST');

        $uname = UserUtil::getVar('uname');
        // password existing check doesn't apply to HTTP(S) based login
        if (!isset($uservars['loginviaoption']) || $uservars['loginviaoption'] == 0) {
            $user = DBUtil::selectObjectByID('users', $uname, 'uname', null, null, null, false, 'lower');
        } else {
            $user = DBUtil::selectObjectByID('users', $uname, 'email', null, null, null, false, 'lower');
        }

        $upass = $user['pass'];
        $hash_number = $user['hash_method'];
        $hashmethodsarray   = ModUtil::apiFunc('Users', 'user', 'getHashMethods', array('reverse' => true));

        $opass = hash($hashmethodsarray[$hash_number], $oldpassword);

        if (empty($oldpassword) || $opass != $upass) {
            return LogUtil::registerError($this->__('Sorry! The password you entered is not correct. Please correct your entry and try again.'),
                null, ModUtil::url('Users', 'user', 'changePassword'));
        }

        $minpass = ModUtil::getVar('Users', 'minpass');
        if (strlen($newpassword) < $minpass) {
            return LogUtil::registerError($this->_fn('Your password must be at least %s character long.', 'Your password must be at least %s characters long.', $minpass, $minpass),
                null, ModUtil::url('Users', 'user', 'changePassword'));
        }

        // check if the new password and the confirmation are identical
        if ($newpassword != $newpasswordconfirm) {
            return LogUtil::registerError($this->__('Sorry! The two passwords you entered do not match. Please correct your entries and try again.'),
                null, ModUtil::url('Users', 'user', 'changePassword'));
        }

        // set the new password
        UserUtil::setPassword($newpassword);
        UserUtil::setVar('password_reminder', $passwordReminder);

        LogUtil::registerStatus($this->__('Done! Saved your new password.'));
        return System::redirect(ModUtil::url('Users', 'user', 'main'));
    }

    /**
     * Display the change email address form.
     *
     * @return string The rendered template.
     */
    public function changeEmail()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        $changeemail = ModUtil::getVar('Users', 'changeemail', 1);
        if ($changeemail <> 1) {
            return System::redirect('Users', 'user', 'main');
        }

        // Create output object
        $renderer = Renderer::getInstance('Users', false, null, true);

        // Return the output that has been generated by this function
        return $renderer->fetch('users_user_changeemail.htm');
    }

    /**
     * Update the email address.
     *
     * Available Post Parameters:
     * - newemail (string) The new e-mail address to store for the user.
     *
     * @return bool True on success, otherwise false.
     */
    public function updateEmail()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        if (!SecurityUtil::confirmAuthKey('Users')) {
            return LogUtil::registerAuthidError(ModUtil::url('Users', 'user', 'changeEmail'));
        }

        $uservars = ModUtil::getVar('Users');
        if ($uservars['changeemail'] <> 1) {
            return System::redirect('Users', 'user', 'main');
        }

        $newemail = FormUtil::getPassedValue('newemail', '', 'POST');

        $checkuser = ModUtil::apiFunc('Users', 'user', 'checkUser',
                                  array('uname'        => UserUtil::getVar('uname'),
                                        'email'        => $newemail,
                                        'agreetoterms' => true));

        // check email related errors only
        if (in_array($checkuser, array(-1, 2, 9, 11, 12))) {
            switch($checkuser)
            {
                case -1:
                    $message = $this->__('Sorry! You have not been granted access to this module.');
                    break;
                case 2:
                    $message =  $this->__('Sorry! The e-mail address you entered was incorrectly formatted or is unacceptable for other reasons. Please correct your entry and try again.');
                    break;
                case 9:
                    $message =  $this->__('Sorry! This e-mail address has already been registered, and it cannot be used again for creating another account.');
                    break;
                case 11:
                    $message =  $this->__('Sorry! Your user agent is not accepted for registering an account on this site.');
                    break;
                case 12:
                    $message =  $this->__('Sorry! E-mail addresses from the domain you entered are not accepted for registering an account on this site.');
                    break;
                default:
                    $message =  $this->__('Sorry! You have not been granted access to this module.');
            } // switch
            return LogUtil::registerError($message, null, ModUtil::url('Users', 'user', 'changeEmail'));
        }

        // save the provisional email until confimation
        if (!ModUtil::apiFunc('Users', 'user', 'savePreEmail',
                        array('newemail' => $newemail))) {
            return LogUtil::registerError($this->__('Error! It has not been possible to change the e-mail address.'), null, ModUtil::url('Users', 'user', 'changeEmail'));
        }

        LogUtil::registerStatus($this->__('Done! You will receive an e-mail to your new e-mail address to confirm the change.'));
        return System::redirect(ModUtil::url('Users', 'user', 'main'));
    }

    /**
     * Display the form that allows the user to change the language displayed to him on the site.
     *
     * @return string The rendered template.
     */
    public function changeLang()
    {
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        // Create output object
        $renderer = Renderer::getInstance('Users', false);

        // Assign the languages
        $renderer->assign('languages', ZLanguage::getInstalledLanguageNames());
        $renderer->assign('usrlang', ZLanguage::getLanguageCode());

        // Return the output that has been generated by this function
        return $renderer->fetch('users_user_changelang.htm');
    }

    /**
     * Confirm the update of the email address.
     *
     * Available Get Parameters:
     * - confirmcode (string) The confirmation code.
     *
     * @param array $args All parameters passed to this function.
     *                    $args['confirmcode'] (string) Default value for the 'confirmcode' get parameter. Allows this function to be called internally.
     *
     * @return bool True on success, otherwise false.
     */
    public function confirmChEmail($args)
    {
        $confirmcode = FormUtil::getPassedValue('confirmcode', isset($args['confirmcode']) ? $args['confirmcode'] : null, 'GET');
        if (!UserUtil::isLoggedIn()) {
            return LogUtil::registerPermissionError();
        }

        // get user new email that is waiting for confirmation
        $preemail = ModUtil::apiFunc('Users', 'user', 'getUserPreEmail');

        // the e-mail change is valid during 5 days
        $fiveDaysAgo =  time() - 5*24*60*60;

        if (!$preemail || $confirmcode != $preemail['comment'] || $preemail['dynamics'] < $fiveDaysAgo) {
            LogUtil::registerError($this->__('Error! Your e-mail has not been found. After your request you have five days to confirm the new e-mail address.'));
            return System::redirect(ModUtil::url('Users', 'user', 'main'));
        }

        // user and confirmation code are correct. set the new email
        UserUtil::setVar('email', $preemail['email']);

        // the preemail record is deleted
        ModUtil::apiFunc('Users', 'admin', 'deny',
                    array('userid' => $preemail['tid']));

        LogUtil::registerStatus($this->__('Done! Changed your e-mail address.'));
        return System::redirect(ModUtil::url('Users', 'user', 'main'));
    }
}
