<?php
/**
 * Zikula Application Framework
 *
 * @copyright (c) Zikula Development Team
 * @link http://www.zikula.org
 * @version $Id$
 * @license GNU/GPL - http://www.gnu.org/copyleft/gpl.html
 * @package Zikula_System_Modules
 * @subpackage Users
 */

/**
 * users_admin_main()
 * Redirects users to the "view" page
 *
 * @return bool true if successful false otherwise
 */
function users_admin_main()
{
    // Security check will be done in view()
    return users_admin_view();
}

/**
 * form to add new item
 *
 * This is a standard function that is called whenever an administrator
 * wishes to create a new module item
 *
 * @author       The Zikula Development Team
 * @return       output       The main module admin page.
 */
function users_admin_new()
{
    // Security check - important to do this as early as possible to avoid
    // potential security holes or just too much wasted processing
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    $userinfo = FormUtil::getPassedValue('userinfo');

    // Create output object - this object will store all of our output so that
    // we can return it easily when required
    $pnRender = Renderer::getInstance('Users', false);

    // Assign the data and Users setting
    $pnRender->assign('userinfo', $userinfo);
    $pnRender->assign('modvars', pnModGetVar('Users'));

    // Return the output that has been generated by this function
    return $pnRender->fetch('users_admin_new.htm');
}

/**
 * Create user
 *
 * @param  $args
 * @return mixed true if successful, string otherwise
 */
function users_admin_create()
{
    // check permisisons
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // get arguments
    $userinfo = array();
    $userinfo['add_uname'] = FormUtil::getPassedValue('add_uname', null, 'POST');
    $userinfo['add_email'] = FormUtil::getPassedValue('add_email', null, 'POST');

    $pass  = FormUtil::getPassedValue('add_pass', null, 'POST');
    $vpass = FormUtil::getPassedValue('add_vpass', null, 'POST');
    $dynadata = FormUtil::getPassedValue('dynadata');
    $usermustconfirm = FormUtil::getPassedValue('usermustconfirm');

    $profileModule = pnConfigGetVar('profilemodule', '');
    $useProfileMod = (!empty($profileModule) && pnModAvailable($profileModule));

    // call the API
    $checkuser = pnModAPIFunc('Users', 'user', 'checkuser',
                              array('uname'        => $userinfo['add_uname'],
                                    'email'        => $userinfo['add_email'],
                                    'agreetoterms' => 1));

    // if errorcode != 1 then return error msgs
    $errormsg = array();
    if ($checkuser != 1) {
        switch($checkuser)
        {
            case -1:
                $errormsg[] = __('Sorry! You have not been granted access to this module.');
                break;
            case 2:
                $errormsg[] = __('Sorry! The e-mail address you entered was incorrectly formatted or is unacceptable for other reasons. Please correct your entry and try again.');
                break;
            case 3:
                $errormsg[] = __("Error! Please click on the checkbox to accept the site's 'Terms of use' and 'Privacy policy'.");
                break;
            case 4:
                $errormsg[] = __('Sorry! The user name you entered is not acceptable. Please correct your entry and try again.');
                break;
            case 5:
                $errormsg[] = __('Sorry! The user name you entered is too long. The maximum length is 25 characters.');
                break;
            case 6:
                $errormsg[] = __('Sorry! The user name you entered is reserved and cannot be registered. Please choose another name and try again.');
                break;
            case 7:
                $errormsg[] = __('Sorry! Your user name cannot contain spaces. Please correct your entry and try again.');
                break;
            case 8:
                $errormsg[] = __('Sorry! This user name has already been registered. Please choose another name and try again.');
                break;
            case 9:
                $errormsg[] = __('Sorry! This e-mail address has already been registered, and it cannot be used again for creating another account.');
                break;
            default:
                $errormsg[] = __('Sorry! You have not been granted access to this module.');
        } // switch

        return LogUtil::registerError($errormsg, null, pnModURL('Users', 'admin', 'new', array('userinfo' => $userinfo, 'dynadata' => $dynadata)));
    }

    if (!empty($dynadata) && $useProfileMod) {
        // Check for required fields - The API function is called.
        $checkrequired = pnModAPIFunc($profileModule, 'user', 'checkrequired',
                                      array('dynadata' => $dynadata));

        if ($checkrequired['result'] == true) {
            $errormsg[] = __f('Error! A required item is missing from your profile information (%s).', $checkrequired['translatedFieldsStr']);
        }
    }

    $minpass = pnModGetVar('Users', 'minpass');

    if (empty($pass)) {
        $errormsg[] = __('Sorry! You did not provide a password. Please correct your entry and try again.');

    } elseif ((isset($pass)) && ("$pass" != "$vpass")) {
        $errormsg[] = __('Sorry! You did not enter the same password in each password field. Please enter the same password once in each password field (this is required for verification).');

    } elseif (($pass != '') && (strlen($pass) < $minpass)) {
        $errormsg[] = _fn('Your password must be at least %s character long', 'Your password must be at least %s characters long', $minpass);
    }

    if (!empty($errormsg)) {
        return LogUtil::registerError($errormsg, null, pnModURL('Users', 'admin', 'new', array('userinfo' => $userinfo, 'dynadata' => $dynadata)));
    }

    $registered = pnModAPIFunc('Users', 'user', 'finishnewuser',
                               array('isadmin'       => 1,
                                     'uname'         => $userinfo['add_uname'],
                                     'pass'          => $pass,
                                     'email'         => $userinfo['add_email'],
                                     'moderated'     => false,
                                     'dynadata'      => $dynadata,
                                     'usermustconfirm' => $usermustconfirm));

    if ($registered) {
        LogUtil::registerStatus(__('Done! Created user account.'));
    } else {
        LogUtil::registerError(__('Error! Could not create the new user account.'));
    }

    return pnRedirect(pnModURL('Users', 'admin', 'main'));
}

/**
 * Shows all items and lists the administration options.
 *
 * @param        startnum     The number of the first item to show
 * @return       output       The main module admin page
 */
function users_admin_view($args)
{
    // Get parameters from whatever input we need.
    $startnum = FormUtil::getPassedValue('startnum', isset($args['startnum']) ? $args['startnum'] : null, 'GET');
    $letter = FormUtil::getPassedValue('letter', isset($args['letter']) ? $args['letter'] : null, 'GET');

    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = Renderer::getInstance('Users', false);

    // we need this value multiple times, so we keep it
    $itemsperpage = pnModGetVar('Users', 'itemsperpage');

    // Get all users
    $items = pnModAPIFunc('Users', 'user', 'getall',
                          array('startnum' => $startnum,
                                'numitems' => $itemsperpage,
                                'letter' => $letter));

    // Get all groups
    $groups = pnModAPIFunc('Groups', 'user', 'getall');

    // check what groups can access the user
    $userGroupsAccess = array();
    $groupsArray = array();
    $canSeeGroups = (!empty($groups));
    foreach($groups as $group){
        $userGroupsAccess[$group['gid']] = array('gid' => $group['gid']);

        // rewrite the groups array with the group id as key and the group name as value
        $groupsArray[$group['gid']] = array('name' => DataUtil::formatForDisplayHTML($group['name']));
    }

    $profileModule = pnConfigGetVar('profilemodule', '');
    $useProfileModule = (!empty($profileModule) && pnModAvailable($profileModule));

    // if module Legal is not available show the equivalent states for user activation value
    $adaptState = (!pnModAvailable('legal') || (!pnModGetVar('legal', 'termsofuse') && !pnModGetVar('legal', 'privacypolicy'))) ? 1 : 0;

    // Loop through each returned item adding in the options that the user has over
    // each item based on the permissions the user has.
    foreach ($items as $key => $item)
    {
        $options = array();
        if (SecurityUtil::checkPermission('Users::', "$item[uname]::$item[uid]", ACCESS_READ) && $item['uid'] != 1) {

            // Options for the item.
            if ($useProfileModule) {
                $options[] = array('url'   => pnModURL($profileModule, 'user', 'view', array('uid' => $item['uid'])),
                                   'image' => 'personal.gif',
                                   'title' => __('View the profile'));
            }
            if (SecurityUtil::checkPermission('Users::', "$item[uname]::$item[uid]", ACCESS_EDIT)) {
                $options[] = array('url'   => pnModURL('Users', 'admin', 'modify', array('userid' => $item['uid'])),
                                   'image' => 'xedit.gif',
                                   'title' => __('Edit'));

                if (SecurityUtil::checkPermission('Users::', "$item[uname]::$item[uid]", ACCESS_DELETE)) {
                    $options[] = array('url'   => pnModURL('Users', 'admin', 'deleteusers', array('userid' => $item['uid'])),
                                       'image' => '14_layer_deletelayer.gif',
                                       'title' => __('Delete'));
                }
            }
            // get user groups
            $userGroups = pnModAPIFunc('Groups', 'user', 'getusergroups',
                                        array('uid' => $item['uid'],
                                              'clean' => 1));
            // we need a associative array by the key to compare with the groups that the user can see
            $userGroupsByKey = array();
            foreach($userGroups as $userGroup){
                $userGroupsByKey[$userGroup['gid']] = array('gid' => $userGroup['gid']);
            }
            $userGroupsView = array_intersect_key($userGroupsAccess, $userGroupsByKey);
        }

        if($item['uid'] == 1){
            $userGroupsView = array();
        }
        // format the dates
        $items[$key]['user_regdate'] = ($item['user_regdate'] != '1970-01-01 00:00:00') ? DateUtil::formatDatetime($item['user_regdate'], __('%m-%d-%Y')) : '---';
        $items[$key]['lastlogin'] = ($item['lastlogin'] != '1970-01-01 00:00:00') ? DateUtil::formatDatetime($item['lastlogin'], __('%m-%d-%Y')) : '---';

        // show user's activation state
        $activationImg = '';
        $activationTitle = '';
        // adapt states if it is necessary
        if($adaptState) {
            if($items[$key]['activated'] == 2) {
                $items[$key]['activated'] = 1;
            } else if ($items[$key]['activated'] == 6) {
                $items[$key]['activated'] = 4;
            }
        }
        // show user's activation state
        if($items[$key]['activated'] == 1) {
            $activationImg = 'greenled.gif';
            $activationTitle = __('Active');
        } else if ($items[$key]['activated'] == 2) {
            $activationImg = 'yellowled.gif';
            $activationTitle = __('Inactive until Legal terms accepted');
        } else if ($items[$key]['activated'] == 4) {
            $activationImg = 'yellowled.gif';
            $activationTitle = __('Inactive until changing password');
        } else if ($items[$key]['activated'] == 6) {
            $activationImg = 'yellowled.gif';
            $activationTitle = __('Inactive until change password and accept legal terms');
        } else {
            $activationImg = 'redled.gif';
            $activationTitle = __('Inactive');
        }
        $items[$key]['activation'] = array('image' => $activationImg,
                                           'title' => $activationTitle);

        // Add the calculated menu options to the item array
        $items[$key]['options'] = $options;
        // Add the groups that the user can see to the item array
        $items[$key]['userGroupsView'] = $userGroupsView;
    }

    // Assign the items to the template
    $pnRender->assign('usersitems', $items);

    // assign the values for the smarty plugin to produce a pager in case of there
    // being many items to display.
    $pnRender->assign('pager', array('numitems'     => pnModAPIFunc('Users', 'user', 'countitems', array('letter' => $letter)),
                                     'itemsperpage' => $itemsperpage));

    // Assign the groups to the template
    $pnRender->assign('allGroups', $groupsArray);

    // Inform to the template that user can see users' groups
    $pnRender->assign('canSeeGroups', $canSeeGroups);

    // Return the output that has been generated by this function
    return $pnRender->fetch('users_admin_view.htm');
}

/**
 * Shows all the applications and the available options.
 *
 * @param        startnum     The number of the first item to show
 * @return       output       The main module admin page
 */
function users_admin_viewapplications()
{
    // security check
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Get parameters from whatever input we need.
    $startnum = FormUtil::getPassedValue ('startnum');

    // Create output object
    $pnRender = Renderer::getInstance('Users', false);

    // we need this value multiple times, so we keep it
    $itemsperpage = pnModGetVar('Users', 'itemsperpage');

    // The user API function is called.
    $items = pnModAPIFunc('Users', 'admin', 'getallpendings',
                          array('startnum' => $startnum,
                                'numitems' => $itemsperpage));

    // Loop through each returned item adding in the options that the user has over
    // each item based on the permissions the user has.
    foreach ($items as $key => $item) {
        if (SecurityUtil::checkPermission('Users::', "$item[uname]::$item[tid]", ACCESS_READ)) {
            // Options for the item.
            $options = array();
            if (pnModGetVar('Users', 'reg_optitems')) {
                $options[] = array('url'   => pnModURL('Users', 'admin', 'viewtempuserinfo', array('userid' => $item['tid'])),
                                   'imgfile' => 'list.gif',
                                   'title' => __('Details'));
            }
            if (SecurityUtil::checkPermission('Users::', "$item[uname]::$item[tid]", ACCESS_ADD)) {
                $options[] = array('url'   => pnModURL('Users', 'admin', 'processusers', array('userid' => $item['tid'], 'op' => 'approve')),
                                   'imgfile' => 'add_user.gif',
                                   'title' => __('Approve'));
                if (SecurityUtil::checkPermission('Users::', "$item[uname]::$item[tid]", ACCESS_DELETE)) {
                    $options[] = array('url'   => pnModURL('Users', 'admin', 'processusers', array('userid' => $item['tid'], 'op' => 'deny')),
                                       'imgfile' => 'delete_user.gif',
                                       'title' => __('Deny'));
                }
            }

            // Add the calculated menu options to the item array
            $items[$key]['options'] = $options;
        }
    }

    // Assign the items to the template
    $pnRender->assign('usersitems', $items);

    // assign the values for the smarty plugin to produce a pager in case of there
    // being many items to display.
    $pnRender->assign('pager', array('numitems'     => pnModAPIFunc('Users', 'admin', 'countpending'),
                                     'itemsperpage' => $itemsperpage));

    // Return the output that has been generated by this function
    return $pnRender->fetch('users_admin_viewapplications.htm');
}

/**
 * Shows the information for the temporary user
 *
 * @param  $args
 * @return string HTML string
 */
function users_admin_viewtempuserinfo()
{
    // security check
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_EDIT)) {
        return LogUtil::registerPermissionError();
    }

    // Get parameters from whatever input we need.
    // (Note that the name of the passed parameter is 'userid' but that it
    // is actually a registration application id.)
    $regid = FormUtil::getPassedValue('userid', null, 'GET');

    if (empty($regid) || !is_numeric($regid)) {
        return LogUtil::registerArgsError();
    }

    $regApplication = pnModAPIFunc('Users', 'admin', 'getapplication', array('userid' => $regid));
    if (!$regApplication) {
        // getapplication could fail (return false) because of a nonexistant
        // record, no permission to read an existing record, or a database error
        return LogUtil::registerError(__('Unable to retrieve registration record. The record with the specified id might not exist, or you might not have permission to access that record.'));
    }

    $regApplication = array_merge($regApplication, (array)@unserialize($regApplication['dynamics']));

    // Create output object
    $pnRender = Renderer::getInstance('Users', false);

    $pnRender->assign('uname',    $regApplication['uname']);
    $pnRender->assign('userid',   $regid);
    $pnRender->assign('userinfo', $regApplication);

    return $pnRender->fetch('users_admin_viewtempuserdetails.htm');
}

/**
 * user_admin_view()
 * Shows the search box for Edit/Delete
 * Shows Add User Dialog
 *
 * @param  $args
 * @return string HTML string
 */
function users_admin_search($args)
{
    // security check
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_EDIT)){
        return LogUtil::registerPermissionError();
    }

    // create output object
    $pnRender = Renderer::getInstance('Users', false);

    // get group items
    // TODO: move to a call to the groups module
    $groups = pnModAPIFunc('Users', 'admin', 'getusergroups', array());
    $pnRender->assign('groups', $groups);

    return $pnRender->fetch('users_admin_search.htm');
}

/**
 * users_admin_listusers()
 * list users
 *
 * @param  $args
 * @return string HTML string
 */
function users_admin_listusers($args)
{
    $uname         = FormUtil::getPassedValue('uname', null, 'POST');
    $ugroup        = FormUtil::getPassedValue('ugroup', null, 'POST');
    $email         = FormUtil::getPassedValue('email', null, 'POST');
    $regdateafter  = FormUtil::getPassedValue('regdateafter', null, 'POST');
    $regdatebefore = FormUtil::getPassedValue('regdatebefore', null, 'POST');

    $dynadata      = FormUtil::getPassedValue('dynadata', null, 'POST');

    // call the api
    $items = pnModAPIFunc('Users', 'admin', 'findusers',
                          array('uname'         => $uname,
                                'email'         => $email,
                                'ugroup'        => $ugroup,
                                'regdateafter'  => $regdateafter,
                                'regdatebefore' => $regdatebefore,
                                'dynadata'      => $dynadata));

    if (!$items) {
        LogUtil::registerError(__('Sorry! No matching users found.'), 404, pnModURL('Users', 'admin', 'search'));
    }

    // create output object
    $pnRender = Renderer::getInstance('Users', false);

    $pnRender->assign('mailusers', SecurityUtil::checkPermission('Users::MailUsers', '::', ACCESS_COMMENT));
    $pnRender->assign('deleteusers', SecurityUtil::checkPermission('Users::', '::', ACCESS_ADMIN));

    // assign the matching results
    $pnRender->assign('items', $items);

    return $pnRender->fetch('users_admin_listusers.htm');
}

/**
 * users_admin_processusers()
 * Edit, Delete and Mail Users
 *
 * @param  $args
 * @return mixed true successful, false or string otherwise
 */
function users_admin_processusers($args)
{
    // security check
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_EDIT)){
        return LogUtil::registerPermissionError();
    }

    // get the arguments from our input
    $op     = FormUtil::getPassedValue('op', null, 'GETPOST');
    $do     = FormUtil::getPassedValue('do', null, 'POST');
    $userid = FormUtil::getPassedValue('userid', null, 'POST');

    if ($op == 'edit' && !empty($userid)) {
        if ($do != 'yes') {
            return pnRedirect(pnModURL('Users', 'admin', 'modify', array('userid' => $userid)));
        } else {
            $uname              = FormUtil::getPassedValue('uname', null, 'POST');
            $email              = FormUtil::getPassedValue('email', null, 'POST');
            $activated          = FormUtil::getPassedValue('activated', null, 'POST');
            $pass               = FormUtil::getPassedValue('pass', null, 'POST');
            $vpass              = FormUtil::getPassedValue('vpass', null, 'POST');
            $theme              = FormUtil::getPassedValue('theme', null, 'POST');
            $access_permissions = FormUtil::getPassedValue('access_permissions', null, 'POST');
            $dynadata           = FormUtil::getPassedValue('dynadata', null, 'POST');

            $return = pnModAPIFunc('Users', 'admin', 'saveuser',
                                   array('uid'                => $userid,
                                         'uname'              => $uname,
                                         'email'              => $email,
                                         'activated'          => $activated,
                                         'pass'               => $pass,
                                         'vpass'              => $vpass,
                                         'theme'              => $theme,
                                         'dynadata'           => $dynadata,
                                         'access_permissions' => $access_permissions));

            if ($return == true) {
                LogUtil::registerStatus(__("Done! Saved user's account information."));
                return pnRedirect(pnModUrl('Users', 'admin', 'main'));
            } else {
                return false;
            }
        }

    } elseif ($op == 'delete' && !empty($userid)) {
        $userid = FormUtil::getPassedValue('userid', null, 'POST');
        if ($do != 'yes'){
            return pnRedirect(pnModURL('Users', 'admin', 'deleteusers', array('userid' => $userid)));
        } else {
            $return = pnModAPIFunc('Users', 'admin', 'deleteuser', array('uid' => $userid));

            if ($return == true) {
                return LogUtil::registerStatus(__('Done! Deleted user account.'), pnModUrl('Users', 'admin', 'main'));
            }
            return false;
        }

    } elseif ($op == 'mail' && !empty($userid) && SecurityUtil::checkPermission('Users::MailUsers', '::', ACCESS_COMMENT)) {
        $userid   = FormUtil::getPassedValue('userid', array(), 'POST');
        $sendmail = FormUtil::getPassedValue('sendmail', array(), 'POST');
        if (empty($sendmail['from']) || empty($sendmail['rpemail']) || empty($sendmail['subject']) || empty($sendmail['message'])) {
            return LogUtil::registerError(__('Error! One or more information items needed to send an e-mail message are missing.'),
                                          null,
                                          pnModURL('Users', 'admin', 'search'));
        }

        $bcclist = array();
        $mailssent = 0;
        $recipientscount = 0;
        foreach ($sendmail['recipientsemail'] as $uid => $recipient)
        {
            if (in_array($uid, $userid)) {
                $bcclist[] = array('name'    => $sendmail['recipientsname'][$uid],
                                   'address' => $recipient);
            }
            if (count($bcclist) == $sendmail['batchsize']) {
                if (pnModAPIFunc('Mailer', 'user', 'sendmessage',
                                 array('fromname'       => $sendmail['from'],
                                       'fromaddress'    => $sendmail['rpemail'],
                                       'toname'         => pnUserGetVar('uname'),
                                       'toaddress'      => pnUserGetVar('email'),
                                       'replytoname'    => pnUserGetVar('uname'),
                                       'replytoaddress' => $sendmail['rpemail'],
                                       'subject'        => $sendmail['subject'],
                                       'body'           => $sendmail['message'],
                                       'bcc'            => $bcclist)) == true) {
                    $mailssent++;
                    $recipientscount += count($bcclist);
                    $bcclist = array();
                } else {
                    return LogUtil::registerError(__('Error! Could not send the e-mail message.'),
                                                  null,
                                                  pnModURL('Users', 'admin', 'main'));
                }
            }
        }
        if (count($bcclist) <> 0) {
            if (pnModAPIFunc('Mailer', 'user', 'sendmessage',
                             array('fromname'       => $sendmail['from'],
                                   'fromaddress'    => $sendmail['rpemail'],
                                   'toname'         => pnUserGetVar('uname'),
                                   'toaddress'      => pnUserGetVar('email'),
                                   'replytoname'    => pnUserGetVar('uname'),
                                   'replytoaddress' => $sendmail['rpemail'],
                                   'subject'        => $sendmail['subject'],
                                   'body'           => $sendmail['message'],
                                   'bcc'            => $bcclist)) == true) {
                $mailssent++;
                $recipientscount += count($bcclist);
            } else {
                return LogUtil::registerError(__('Error! Could not send the e-mail message.'),
                                              null,
                                              pnModURL('Users', 'admin', 'main'));
            }
        }
        if ($mailssent > 0) {
            LogUtil::registerStatus(_fn('Done! %1$c e-mail message has been sent to %2$c user.', 'Done! %1$c e-mail messages have been sent to %2$c users.', $mailssent, array($mailssent, $recipientscount)));
        }
        return pnRedirect(pnModURL('Users', 'admin', 'main'));

    } elseif ($op == 'approve' || $op == 'deny') {
        $tag = FormUtil::getPassedValue('tag');

        if (empty($tag)) {
            $userid = FormUtil::getPassedValue('userid', null, 'GET');

            $item = pnModAPIFunc('Users', 'admin', 'getapplication', array('userid' => $userid));

            if (!$item) {
                return LogUtil::registerError(__('Sorry! Could not find any matching user account.'),
                                              null,
                                              pnModUrl('Users', 'admin', 'main'));
            }

            // create the output object
            $pnRender = Renderer::getInstance('Users', false);

            $pnRender->assign('action', $op);
            $pnRender->assign('userid', $userid);
            $pnRender->assign('item',   $item);

            return $pnRender->fetch('users_admin_pendingaction.htm');

        } else {
            $userid = FormUtil::getPassedValue('userid');
            $action = FormUtil::getPassedValue('action');

            $return = pnModAPIFunc('Users', 'admin', $action, array('userid' => $userid));

            if ($return == true) {
                if ($op == 'approve') {
                    LogUtil::registerStatus(__('Done! Created the new user account.'));
                } else {
                    LogUtil::registerStatus(__('Done! Deleted user account.'));
                }
            } else {
                LogUtil::registerError(__('Error! Could not create the new user account.'));
            }
            return pnRedirect(pnModUrl('Users', 'admin', 'main'));
        }

    } else {
        return LogUtil::registerError(__('Error! No users were selected.'));
    }

    return pnRedirect(pnModURL('Users', 'admin', 'search'));
}

/**
 * users_admin_modify()
 *
 * @param  $args
 * @return string HTML string
 */
function users_admin_modify($args)
{
    // security check
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_EDIT)){
        return LogUtil::registerPermissionError();
    }

    // get arguments
    $userid = FormUtil::getPassedValue('userid', (isset($args['userid']) ? $args['userid'] : null), 'GET');
    $uname  = FormUtil::getPassedValue('uname', (isset($args['uname']) ? $args['uname'] : null), 'GET');

    // check arguments
    if (is_null($userid) && is_null($uname)) {
        LogUtil::registerError(__('Sorry! No such user found.'));
        return pnRedirect(pnModURL('Users', 'admin', 'main'));
    }

    // retreive userid from uname
    if (is_null($userid) && !empty($uname)) {
        $userid = pnUserGetIDFromName($uname);
    }

    // warning for guest account
    if ($userid == 1) {
        LogUtil::registerError(__("Error! You can't edit the guest account."));
        return pnRedirect(pnModURL('Users', 'admin', 'main'));
    }

    // get the user vars
    $uservars = pnUserGetVars($userid);
    if ($uservars == false) {
        LogUtil::registerError(__('Sorry! No such user found.'));
        return pnRedirect(pnModURL('Users', 'admin', 'main'));
    }

    // if module Legal is not available show the equivalent states for user activation value
    if(!pnModAvailable('legal') || (!pnModGetVar('legal', 'termsofuse') && !pnModGetVar('legal', 'privacypolicy'))) {
        if($uservars['activated'] == 2) {
            $uservars['activated'] = 1;
        } else if ($uservars['activated'] == 6) {
            $uservars['activated'] = 4;
        }
    }

    // create the output oject
    $Renderer = Renderer::getInstance('Users', false);

    // urls
    $Renderer->assign('urlprocessusers', pnModUrl('Users', 'admin', 'processusers', array('op' => 'edit', 'do' => 'yes')));
    $Renderer->assign('op', 'edit');
    $Renderer->assign('userid', $userid);
    $Renderer->assign('userinfo', $uservars);

    // groups
    $permissions_array = array();
    $access_types_array = array();
    $user_groups = pnModAPIFunc('Groups', 'user', 'getusergroups', array('uid' => $userid));
    $all_groups = pnModAPIFunc('Groups', 'user', 'getall');

    foreach ($all_groups as $group) {
        if(SecurityUtil::checkPermission('Groups::', "$group[gid]::", ACCESS_EDIT)) {
            $groups_infos[$group['gid']] = array();
            $groups_infos[$group['gid']]['name'] = $group['name'];

            foreach ($user_groups as $user_group) {
                if ($user_group['gid'] == $group['gid']) {
                    $groups_infos[$group['gid']]['access'] = true;
                } else {
                    $groups_infos[$group['gid']]['access'] = false;
                }
            }
        }
    }

    $Renderer->assign('groups_infos', $groups_infos);
    $Renderer->assign('legal', pnModAvailable('legal'));
    $Renderer->assign('tou_active', pnModGetVar('legal', 'termsofuse', true));
    $Renderer->assign('pp_active',  pnModGetVar('legal', 'privacypolicy', true));

    return $Renderer->fetch('users_admin_modify.htm');
}

/**
 * users_admin_deleteusers()
 *
 * @param $args
 * @return string HTML string
 **/
function users_admin_deleteusers($args)
{
    // check permissions
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_DELETE)){
        return LogUtil::registerPermissionError();
    }

    // get arguments
    $userid = FormUtil::getPassedValue('userid', (isset($args['userid']) ? $args['userid'] : null), 'GET');
    $uname  = FormUtil::getPassedValue('uname', (isset($args['uname']) ? $args['uname'] : null), 'GET');

    // check arguments
    if (is_null($userid) && is_null($uname)) {
        LogUtil::registerError(__('Sorry! No such user found.'));
        return pnRedirect(pnModURL('Users', 'admin', 'main'));
    }

    // retreive userid from uname
    if (is_null($userid) && !empty($uname)) {
        $userid = pnUserGetIDFromName($uname);
    }

    // warning for guest account
    if ($userid == 1) {
        LogUtil::registerError(__("Error! You can't delete the guest account."));
        return pnRedirect(pnModURL('Users', 'admin', 'main'));
    }

    // get the user vars
    $uname = pnUserGetVar('uname', $userid);
    if ($uname == false) {
        LogUtil::registerError(__('Sorry! No such user found.'));
        return pnRedirect(pnModURL('Users', 'admin', 'main'));
    }

    // create the output object
    $Renderer = Renderer::getInstance('Users', false);

    $Renderer->assign('userid', $userid);
    $Renderer->assign('uname', $uname);

    // return output
    return $Renderer->fetch('users_admin_deleteusers.htm');
}

/**
 * users_admin_modifyconfig()
 *
 * User configuration settings
 * @see function settings_admin_main()
 * @return string HTML string
 **/
function users_admin_modifyconfig()
{
    // Security check
    if (!(SecurityUtil::checkPermission('Users::', '::', ACCESS_ADMIN))) {
        return LogUtil::registerPermissionError();
    }

    // Create output object
    $pnRender = Renderer::getInstance('Users', false);

    // assign the module vars
    $pnRender->assign('config', pnModGetVar('Users'));

    $pnRender->assign('legal', pnModAvailable('legal'));
    $pnRender->assign('tou_active', pnModGetVar('legal', 'termsofuse', true));
    $pnRender->assign('pp_active',  pnModGetVar('legal', 'privacypolicy', true));

    // Return the output that has been generated by this function
    return $pnRender->fetch('users_admin_modifyconfig.htm');
}

/**
 * users_admin_updateconfing()
 *
 * Update user configuration settings
 * @see function settings_admin_main()
 * @return string HTML string
 **/
function users_admin_updateconfig()
{
    // security check
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_ADMIN)) {
        return LogUtil::registerPermissionError();
    }

    // get our input
    $config = FormUtil::getPassedValue('config', '', 'POST');

    if (!isset($config['reg_noregreasons'])) {
        $config['reg_noregreasons'] = '';
    }

    pnModSetVar('Users', 'itemsperpage', $config['itemsperpage']);
    pnModSetVar('Users', 'accountdisplaygraphics', $config['accountdisplaygraphics']);
    pnModSetVar('Users', 'accountitemsperpage', $config['accountitemsperpage']);
    pnModSetVar('Users', 'accountitemsperrow', $config['accountitemsperrow']);
    pnModSetVar('Users', 'changepassword', $config['changepassword']);
    pnModSetVar('Users', 'changeemail', $config['changeemail']);
    pnModSetVar('Users', 'userimg', $config['userimg']);
    pnModSetVar('Users', 'reg_uniemail', $config['reg_uniemail']);
    pnModSetVar('Users', 'reg_optitems', $config['reg_optitems']);
    pnModSetVar('Users', 'reg_allowreg', $config['reg_allowreg']);
    pnModSetVar('Users', 'reg_noregreasons', $config['reg_noregreasons']);
    pnModSetVar('Users', 'moderation', $config['moderation']);
    pnModSetVar('Users', 'reg_verifyemail', $config['reg_verifyemail']);
    pnModSetVar('Users', 'reg_notifyemail', $config['reg_notifyemail']);
    pnModSetVar('Users', 'reg_Illegaldomains', $config['reg_Illegaldomains']);
    pnModSetVar('Users', 'reg_Illegalusername', $config['reg_Illegalusername']);
    pnModSetVar('Users', 'reg_Illegaluseragents', $config['reg_Illegaluseragents']);
    pnModSetVar('Users', 'minage', $config['minage']);
    pnModSetVar('Users', 'minpass', $config['minpass']);
    pnModSetVar('Users', 'anonymous', $config['anonymous']);
    pnModSetVar('Users', 'loginviaoption', $config['loginviaoption']);
    pnModSetVar('Users', 'hash_method', $config['hash_method']);
    pnModSetVar('Users', 'login_redirect', $config['login_redirect']);
    pnModSetVar('Users', 'reg_question', $config['reg_question']);
    pnModSetVar('Users', 'reg_answer', $config['reg_answer']);
    pnModSetVar('Users', 'idnnames', $config['idnnames']);
    pnModSetVar('Users', 'use_password_strength_meter', $config['use_password_strength_meter']);
    pnModSetVar('Users', 'avatarpath', $config['avatarpath']);
    pnModSetVar('Users', 'lowercaseuname', $config['lowercaseuname']);

    if(pnModAvailable('legal')) {
        pnModSetVar('Legal', 'termsofuse', $config['termsofuse']);
        pnModSetVar('Legal', 'privacypolicy', $config['privacypolicy']);
    }
    // Let any other modules know that the modules configuration has been updated
    pnModCallHooks('module', 'updateconfig', 'Users', array('module' => 'Users'));

    // the module configuration has been updated successfuly
    LogUtil::registerStatus(__('Done! Saved module configuration.'));

    return pnRedirect(pnModURL('Users', 'admin', 'modifyconfig'));
}

/**
 * users_admin_import()
 *
 * Show the form to choose a CSV file and import several users from this file
 * @return redirect user to admin main page if success and show again the forn otherwise
 **/
function users_admin_import($args)
{
    // security check
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // get input values
    $confirmed     = FormUtil::getPassedValue('confirmed', (isset($args['confirmed']) ? $args['confirmed'] : null), 'POST');

    // set default parameters
    $minpass = pnModGetVar('Users', 'minpass');
    $defaultGroup = pnModGetVar('Groups', 'defaultgroup');

    if($confirmed == 1) {
        // get other import values
        $importFile = FormUtil::getPassedValue('importFile', (isset($args['importFile']) ? $args['importFile'] : null), 'FILES');
        $delimiter = FormUtil::getPassedValue('delimiter', (isset($args['delimiter']) ? $args['delimiter'] : null), 'POST');
        $importResults = pnModFunc('Users', 'admin', 'uploadImport',
                                   array('importFile' => $importFile,
                                         'delimiter' => $delimiter));
        if($importResults == '') {
            // the users have been imported successfully
            LogUtil::registerStatus(__('Done! Users imported successfully.'));
            return pnRedirect(pnModURL('Users', 'admin', 'main'));
        }
    }

    // shows the form
    $post_max_size = ini_get('post_max_size');
    // get default group
    $group = pnModAPIFunc('Groups','user','get',
                        array('gid' => $defaultGroup));
    $defaultGroup = $defaultGroup . ' (' . $group['name'] . ')';
    // Create output object
    $pnRender = Renderer::getInstance('Users', false);
    $pnRender->assign('importResults', $importResults);
    $pnRender->assign('post_max_size', $post_max_size);
    $pnRender->assign('minpass', $minpass);
    $pnRender->assign('defaultGroup', $defaultGroup);

    return $pnRender->fetch('users_admin_import.htm');
}

/**
 * users_admin_uploadImport($args)
 *
 * Import several users from a CSV file. Checks needed values and format
 * @return a empty message if success or an error message otherwise
 **/
function users_admin_uploadImport($args)
{
    // security check
    if (!SecurityUtil::checkPermission('Users::', '::', ACCESS_ADD)) {
        return LogUtil::registerPermissionError();
    }

    // get import values
    $importFile = FormUtil::getPassedValue('importFile', (isset($args['importFile']) ? $args['importFile'] : null), 'FILES');
    $delimiter = FormUtil::getPassedValue('delimiter', (isset($args['delimiter']) ? $args['delimiter'] : null), 'POST');

    // get needed values
    $is_admin = (SecurityUtil::checkPermission('Users::', '::', ACCESS_ADMIN)) ? true : false;
    $minpass = pnModGetVar('Users', 'minpass');
    $defaultGroup = pnModGetVar('Groups', 'defaultgroup'); // Create output object;
    // calcs $pregcondition needed to verify illegal usernames
    $reg_illegalusername = pnModGetVar('Users', 'reg_Illegalusername');
    $pregcondition = '';
    if (!empty($reg_illegalusername)) {
        $usernames = explode(" ", $reg_illegalusername);
        $count = count($usernames);
        $pregcondition = "/((";
        for ($i = 0;$i < $count;$i++) {
            if ($i != $count-1) {
                $pregcondition .= $usernames[$i] . ")|(";
            } else {
                $pregcondition .= $usernames[$i] . "))/iAD";
            }
        }
    }

    // get available groups
    $allGroups = pnModAPIFunc('Groups','user','getall');

    // create an array with the groups identities where the user can add other users
    $allGroupsArray = array();
    foreach($allGroups as $group){
        if (SecurityUtil::checkPermission('Groups::', $group['gid'] . '::', ACCESS_EDIT)) {
            $allGroupsArray[] = $group['gid'];
        }
    }

    // check if the user's email must be unique
    $reg_uniemail = pnModGetVar('Users', 'reg_uniemail');

    // get the CSV delimiter
    switch ($delimiter) {
        case 1:
            $delimiterChar = ",";
            break;
        case 2:
            $delimiterChar = ";";
            break;
        case 3:
            $delimiterChar = ":";
            break;
    }

    // check that the user have selected a file
    $fileName = $importFile['name'];
    if($fileName == '') {
        return __("Error! You have not chosen any file.");
    }

    // check if user have selected a correct file
    if(FileUtil::getExtension($fileName) != 'csv') {
        return __("Error! The file extension is incorrect. The only allowed extension is csv.");
    }

    // read the choosen file
    if(!$lines = file($importFile['tmp_name'])) {
        return __("Error! It has not been possible to read the import file.");
    }
    $expectedFields = array('uname', 'pass', 'email', 'activated', 'sendMail', 'groups');
    $counter = 0;
    $importValues = array();
    // read the lines and create an array with the values. Check if the values passed are correct and set the default values if it is necessary
    foreach ($lines as $line_num => $line) {
        if($counter == 0) {
            // check the fields defined in the first row
            $firstLineArray = DataUtil::formatForOS(explode($delimiterChar, trim($line)));
            foreach($firstLineArray as $field) {
                if(!in_array(trim($field), $expectedFields)) {
                    return __("Error! The import file does not have the expected fields in the first row. Please check your import file.");
                }
            }
            $counter++;
            continue;
        }
        // get and check the second and following lines
        $lineArray = array();
        $lineArray = DataUtil::formatForOS(explode($delimiterChar, str_replace('"','',$line)));

        // check if the line have all the needed values
        if(count($lineArray) != count($firstLineArray)) {
            return __f('Error! The number of parameters in line %s is not correct. Please check your import file.', $counter);
        }
        $importValues[] = array_combine($firstLineArray, $lineArray);

        // check all the obtained values
        // check user name
        $uname = trim($importValues[$counter - 1]['uname']);
        if($uname == '' || strlen($uname) > 25) {
            return __f('Sorry! The user name is not valid in line %s. The user name is mandatory and the maximum length is 25 characters. Please check your import file.', $counter);
        }

        // check if it is a valid user name
        // admins are allowed to add any usernames, even those defined as being illegal
        if (!$is_admin && $pregcondition != '') {
            // check for illegal usernames
            if (preg_match($pregcondition, $uname)) {
                return __f('Sorry! The user name %s is reserved and cannot be registered in line %s. Please check your import file.', array($uname, $counter));
            }
        }

        // check if the user name is valid because spaces or invalid characters
        if (preg_match("/[[:space:]]/", $uname) || !pnVarValidate($uname, 'uname')) {
            return __f('Sorry! The user name %s cannot contain spaces in line %s. Please check your import file.', array($uname, $counter));
        }

        // check if the user name is repeated
        if(in_array($uname, $usersArray)) {
            return __f('Sorry! The user name %s is repeated in line %s, and it cannot be used twice for creating accounts. Please check your import file.', array($uname, $counter));
        }
        $usersArray[] = $uname;

        // check password
        $pass = trim($importValues[$counter - 1]['pass']);
        if($pass == '') {
            return __f('Sorry! You did not provide a password in line %s. Please check your import file.', $counter);
        }

        // check password lenght
        if(strlen($pass) <  $minpass) {
            return __f('Sorry! The password must be at least %s characters long in line %s. Please check your import file.', array($minpass, $counter));
        }

        // check email
        $email = trim($importValues[$counter - 1]['email']);
        if($email == '') {
            return __f('Sorry! You did not provide a email in line %s. Please check your import file.', $counter);
        }

        // check email format
        if (!pnVarValidate($email, 'email')) {
            return __f('Sorry! The e-mail address you entered was incorrectly formatted or is unacceptable for other reasons in line %s. Please check your import file.', $counter);
        }

        // check if email is unique only if it is necessary
        if($reg_uniemail == 1){
            if(in_array($email, $emailsArray)) {
                return __f('Sorry! The %s e-mail address is repeated in line %s, and it cannot be used twice for creating accounts. Please check your import file.', array($email, $counter));
            }
            $emailsArray[] = $email;
        }

        $activated = trim($importValues[$counter - 1]['activated']);
        // check activation value and set 1 as default if it is not defined or it is incorrect
        if (!$activated || ($activated != 0 &&
            $activated != 1 &&
            $activated != 2 &&
            $activated != 4 &&
            $activated != 6)) {
                $importValues[$counter - 1]['activated'] = 1;
        }

        // check send mail and set 0 as default if it is not defined
        $importValues[$counter - 1]['sendMail'] = ($importValues[$counter - 1]['sendMail'] != 0 || $importValues[$counter - 1]['sendMail'] == '') ? 1 : 0;

        // check groups and set defaultGroup as default if there are not groups defined
        $groups = trim($importValues[$counter - 1]['groups']);
        if($groups == '') {
            $importValues[$counter - 1]['groups'] = $defaultGroup;
        } else {
            $groupsArray = explode('|', $groups);
            foreach($groupsArray as $group) {
                if(!in_array($group, $allGroupsArray)) {
                    return __f('Sorry! The identity of the group %s is not not valid in line %s. Perhaps it do not exist. Please check your import file.', array($group, $counter));
                }
            }
        }
        $counter++;
    }

    // seams that the import file is formated correctly and its values are valid
    if(empty($importValues)) {
        return __("Error! The import file does not have values.");
    }

    // check if users exists in database
    $usersInDB = pnModAPIFunc('Users', 'admin', 'checkMultipleExistence',
                                  array('valuesArray' => $usersArray,
                                        'key' => 'uname'));
    if($usersInDB === false) {
        return __("Error! Trying to read the existing user names in database.");
    } else {
        if(count($usersInDB) > 0) {
            return __f("Sorry! One or more user names really exist in database. The user names must be uniques.");
        }
    }

    // check if emails exists in data base in case the email have to be unique
    if($reg_uniemail == 1){
        $emailsInDB = pnModAPIFunc('Users', 'admin', 'checkMultipleExistence',
                                      array('valuesArray' => $emailsArray,
                                            'key' => 'email'));
        if($emailsInDB === false) {
            return __("Error! Trying to read the existing users' emails in database.");
        } else {
            if(count($emailsInDB) > 0) {
                return __f("Sorry! One or more users' emails really exists in database. The users' emails must be uniques.");
            }
        }
    }

    // seems that the values in import file are ready. Procceed creating users
    if(!pnModAPIFunc('Users', 'admin', 'createImport', array('importValues' => $importValues))) {
        return __f("Error! The creation of users has failed.");
    }

    return '';
}
